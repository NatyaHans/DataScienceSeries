[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Series",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Cran Introduction to R https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\nR Cookbook http://www.cookbook-r.com/\nInteractively learn R https://www.programiz.com/r\nggplot2 tutorials https://r-graph-gallery.com/ggplot2-package.html\nggplot2 https://ggplot2.tidyverse.org/\nColor Brewer https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\nRcolorbrewer palette https://r-graph-gallery.com/38-rcolorbrewers-palettes.html\nColor Hex https://www.color-hex.com/\nggsci package https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html"
  },
  {
    "objectID": "resources.html#resources",
    "href": "resources.html#resources",
    "title": "Resources",
    "section": "",
    "text": "1. Cran Introduction to R https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\n2. R Cookbook http://www.cookbook-r.com/\n3. Interactively learn R https://www.programiz.com/r"
  },
  {
    "objectID": "workshop1.html",
    "href": "workshop1.html",
    "title": "Intro to R",
    "section": "",
    "text": "The three panes are\n\nConsole - used for running the code\nEnvironment - has information about the loaded variables and history of commands run (it also has shortcuts for uploading datasets and saving workspace)\nHelp pane - gives you access to files, plots and package information. Also helpful in saving plots.\n\nYou can change where the console is in Rstudio by going to View-&gt;Pane-&gt;Console on Right. You can also change how the panes look in Rstudio by going to View-&gt;Pane-&gt;Pane Layout"
  },
  {
    "objectID": "workshop1.html#basics-using-rstudio-and-r",
    "href": "workshop1.html#basics-using-rstudio-and-r",
    "title": "Intro to R",
    "section": "",
    "text": "The three panes are\n\nConsole - used for running the code\nEnvironment - has information about the loaded variables and history of commands run (it also has shortcuts for uploading datasets and saving workspace)\nHelp pane - gives you access to files, plots and package information. Also helpful in saving plots.\n\nYou can change where the console is in Rstudio by going to View-&gt;Pane-&gt;Console on Right. You can also change how the panes look in Rstudio by going to View-&gt;Pane-&gt;Pane Layout"
  },
  {
    "objectID": "workshop1.html#arithmetic-operators-and-comparisons",
    "href": "workshop1.html#arithmetic-operators-and-comparisons",
    "title": "Intro to R",
    "section": "Arithmetic operators and comparisons",
    "text": "Arithmetic operators and comparisons\nR can do basic arithmetic calculations\n\nBasic calculation\n\n# Calculations\n\n1+1 # addition\n\n[1] 2\n\n1-5 # subtraction\n\n[1] -4\n\n1*3 # multiplication \n\n[1] 3\n\n1/6 # division\n\n[1] 0.1666667\n\n# Comparisons; evaluates the statement \n\n1==1  # equal to comparison; this statement evaluates to TRUE\n\n[1] TRUE\n\n1!=1  # not equal comparison; evaluates to FALSE\n\n[1] FALSE\n\n1!=2  # not equal comparison; evaluates to TRUE\n\n[1] TRUE\n\n1&gt;2   # greater than comparison; evaluates to FALSE\n\n[1] FALSE\n\n1&gt;=2  #\n\n[1] FALSE\n\n\n\n\nUseful Inbuild Functions in R\n\n#Trig functions\nsin(1)\n\n[1] 0.841471\n\ncos(1)\n\n[1] 0.5403023\n\n# log functions\nlog(1)\n\n[1] 0\n\nlog10(2)\n\n[1] 0.30103\n\n# exponential\nexp(1)\n\n[1] 2.718282\n\n\n\n\nVariable assignment\n&lt;- is the assignment operator. You can also use = operator i.e. equals to sign.\n\nx &lt;- 5/9\nx\n\n[1] 0.5555556\n\nx &lt;- x + 1 # variables can also be used to reassign\nx\n\n[1] 1.555556\n\n# Note that the following two lines of code are same\n\n# x = 8 \n# x &lt;- 8\n\nValid variable names cannot start with a special character or number. Periods, numbers and underscore are allowed within variable names. Please note that variable names are case sensitive in R. For example, variables names data.new and data.New are NOT the same.\nSome examples of allowed variable names:\n\nx_new\nx.new\nxNew\nxNEW\nNewx\nNEW\nNewx2\nNEW2x\nNEW2_x\n\n\n\nComments in R\n\n# single line comment\n# x&lt;-5\n\nx\n\n[1] 1.555556\n\n\"\nMulti line comment\n\nx&lt;- 5\n\nEverything between quotes\n\n\"\n\n[1] \"\\nMulti line comment\\n\\nx&lt;- 5\\n\\nEverything between quotes\\n\\n\"\n\nx\n\n[1] 1.555556\n\n\n\n\nVectors\nVectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw. Using function to create vectors:\n\n1:10 # is a sequence from 1 to 10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx &lt;- 1:10\n\n# indexing a vector # Index in R starts at 1\nx[5] # this outputs the 5th element in the vector 5\n\n[1] 5\n\n# subsetting a vector\nx &lt;- 10:20 # this is a vector from 10 to 20\nx[4:5] # subsetting the element 4th the 5th from the vector\n\n[1] 13 14\n\n# Vector types\nx.num&lt;-c(1,7,8,16,245) # numeric vector\nstr(x.num)\n\n num [1:5] 1 7 8 16 245\n\nx.log&lt;-c(TRUE,FALSE,TRUE,FALSE,FALSE) # logical vector\nstr(x.log)\n\n logi [1:5] TRUE FALSE TRUE FALSE FALSE\n\nx.char&lt;-c(\"A\", \"B\", \"C\",\"D\",\"E\",\"F\")\nstr(x.char)\n\n chr [1:6] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n\n# changing vector types\nas.character(x.num) # changing the vector from numeric to character\n\n[1] \"1\"   \"7\"   \"8\"   \"16\"  \"245\"\n\nstr(as.character(x.num)) \n\n chr [1:5] \"1\" \"7\" \"8\" \"16\" \"245\"\n\nx.num&lt;-c(\"1\",\"7\",\"8\",\"16\",\"245\")\nstr(x.num)\n\n chr [1:5] \"1\" \"7\" \"8\" \"16\" \"245\"\n\nas.numeric(x.num)\n\n[1]   1   7   8  16 245\n\nstr(as.numeric(x.num))\n\n num [1:5] 1 7 8 16 245\n\nseq(from=1,to=10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(from=-1,to=-10)\n\n [1]  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10\n\nseq(from=3,to=30,by=3)\n\n [1]  3  6  9 12 15 18 21 24 27 30\n\ndat.seq&lt;-seq(from=1,to=300,by=4)\nlength(dat.seq)\n\n[1] 75\n\n# rep function\nrep(1:3,5) # the sequence 1:3 is repeated 5 times\n\n [1] 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3"
  },
  {
    "objectID": "workshop1.html#installing-packages",
    "href": "workshop1.html#installing-packages",
    "title": "Intro to R",
    "section": "Installing packages",
    "text": "Installing packages\n\n#install.packages(\"ggplot2\") # installing packages\nlibrary(ggplot2) # using packages \nrequire(ggplot2) # using packages \n#update.packages(ggplot2) # updating packages\n#remove.packages(ggplot2) # removing packages"
  },
  {
    "objectID": "workshop1.html#file-and-project-management",
    "href": "workshop1.html#file-and-project-management",
    "title": "Intro to R",
    "section": "File and Project management",
    "text": "File and Project management\n\nRscript\nCreating a new R script in RStudio:\n\nClick the “File” menu button, then “New File”.\nClick “R script”.\n\n\n\nR Notebook and R markdown\nCreating a new R script in RStudio:\n\nClick the “File” menu button, then “New File”.\nClick “R markdown”.\nEnter “title” and “author” name\nChoose output format\n\n\n\nR Project\nCreating a new project in RStudio:\n\nClick the “File” menu button, then “New Project”.\nClick “New Directory”.\nClick “New Project”.\nType in the name of the directory to store your project, e.g. “my_project”.\nSelect the checkbox for “Create a git repository” for version control.\nClick the “Create Project” button."
  },
  {
    "objectID": "workshop1.html#getting-help",
    "href": "workshop1.html#getting-help",
    "title": "Intro to R",
    "section": "Getting help",
    "text": "Getting help\n\n#? # help with a function\n#?? # Fuzzy search\n#sessionInfo() # prints out current version and packages loaded"
  },
  {
    "objectID": "workshop1.html#common-r-mistakes-and-how-to-avoid-them",
    "href": "workshop1.html#common-r-mistakes-and-how-to-avoid-them",
    "title": "Intro to R",
    "section": "Common R mistakes and how to avoid them",
    "text": "Common R mistakes and how to avoid them\n\nWrong paths: Make sure you understand the difference between absolute and relative paths of files. Most common errors the beginners face are not being able to load their data because of being in the wrong working directory. Set your working directory at the beginning of R session and make sure your file paths are correctly set.\nPay attention to Errors: If you are a new user or running a new script, make sure to run it line by line to troubleshoot the line giving you the error. Read the error if you are not able to figure it out, copy and paste the error into the search engine.\nNot Utilizing available help: Use Help pane, Stackoverflow , Rbloogers or R community available online and at your institution."
  },
  {
    "objectID": "workshop2.html",
    "href": "workshop2.html",
    "title": "Intro to R-2",
    "section": "",
    "text": "ls() # list all the variables in the environment\n\n[1] \"has_annotations\"\n\nrm(x) # can be used to remove specific var\n\nWarning in rm(x): object 'x' not found\n\n#rm(list = ls()) # removes everything"
  },
  {
    "objectID": "workshop2.html#matrices",
    "href": "workshop2.html#matrices",
    "title": "Intro to R-2",
    "section": "Matrices",
    "text": "Matrices\nIn R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. A matrix is two-dimensional, since we are only working with rows and columns.\n\n# Creating a new empty matrix\nmat.example &lt;- matrix(0, ncol=8, nrow=4) \n\n# viewing the matrix\nView(mat.example) \n\n# class\nclass(mat.example) \n\n[1] \"matrix\" \"array\" \n\n# rows and columns\ndim(mat.example) \n\n[1] 4 8\n\n# accessing column number\nncol(mat.example) \n\n[1] 8\n\n# accessing row numbers\nnrow(mat.example) \n\n[1] 4\n\n\n\nCreating data\n\n# Creating a new matrix with data:\n\n# Using rnorm to generate 20 random numbers\nmat.dat&lt;-rnorm(20)\n\n# Note that the random numbers will be different every time you run this code,\n\n# Note check ?rnorm ?pnorm ?dnorm for more information on using probability distribution\nmat.dat\n\n [1]  0.37160487 -0.09967078 -1.32308874  0.55961641  0.38280210 -1.42811434\n [7] -1.64058654 -0.49745318  0.84910911  2.02417852 -1.77292412 -2.79437143\n[13]  0.61240073  1.32098573  0.39716831  0.91048053  0.18622008  0.64074346\n[19]  3.25276306 -1.54391444\n\n# populating the matrix by row\nmat.example2&lt;-matrix(data = mat.dat, nrow = 4, ncol = 5, byrow = TRUE) \n\n\n\nSubsetting Matrices\n\n# Subsetting rows and columns\nmat.example2[2,4]\n\n[1] 0.8491091"
  },
  {
    "objectID": "workshop2.html#lists-in-r",
    "href": "workshop2.html#lists-in-r",
    "title": "Intro to R-2",
    "section": "Lists in R",
    "text": "Lists in R\nLists are the R objects and contain elements of different types, For example a list can have numbers, characters, strings, vectors, matrix and another list inside it. A list can also have a function as one of its elements.\n\nlist_data&lt;-list(\"Red\",\"Green\", c(21,34,22), TRUE, 52.53, 193.8)\nlist_data\n\n[[1]]\n[1] \"Red\"\n\n[[2]]\n[1] \"Green\"\n\n[[3]]\n[1] 21 34 22\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] 52.53\n\n[[6]]\n[1] 193.8\n\nlist_data_new&lt;-list(dat.new2, mat.example2)\nlist_data_new\n\n[[1]]\n   name language year\n1  Anna        R    4\n2   Bob        C    5\n3 Chris     Java    9\n\n[[2]]\n           [,1]        [,2]       [,3]      [,4]       [,5]\n[1,]  0.3716049 -0.09967078 -1.3230887 0.5596164  0.3828021\n[2,] -1.4281143 -1.64058654 -0.4974532 0.8491091  2.0241785\n[3,] -1.7729241 -2.79437143  0.6124007 1.3209857  0.3971683\n[4,]  0.9104805  0.18622008  0.6407435 3.2527631 -1.5439144\n\n\n\nSubsetting lists\n\nlist_data[[3]]\n\n[1] 21 34 22\n\nlist_data_new[[2]]\n\n           [,1]        [,2]       [,3]      [,4]       [,5]\n[1,]  0.3716049 -0.09967078 -1.3230887 0.5596164  0.3828021\n[2,] -1.4281143 -1.64058654 -0.4974532 0.8491091  2.0241785\n[3,] -1.7729241 -2.79437143  0.6124007 1.3209857  0.3971683\n[4,]  0.9104805  0.18622008  0.6407435 3.2527631 -1.5439144\n\n\n\n\nQuestions from the workshop\n\n# Q1: How to sort dataframes?\n\n# Use sort function to sort a vector\nx&lt;-c(1:10,8.5,7.6,2.5,1.3,2.4)\nsort(x)\n\n [1]  1.0  1.3  2.0  2.4  2.5  3.0  4.0  5.0  6.0  7.0  7.6  8.0  8.5  9.0 10.0\n\n# For sorting dataframes using the function order\nnewdata[order(newdata$year, decreasing = TRUE), ]\n\n     name language year\n7  George     HTML   10\n3   Chris     Java    9\n6 Felicia      C++    9\n2     Bob        C    5\n5    Evan     Perl    5\n1    Anna        R    4\n4   Diego   Python    4\n\n# Notice that the above function is used at the row position since we are sorting by row\n\n# Another example:\nnewdata2&lt;-data.frame(col1=c(31:40),col2=c(seq(1,30,by=3)))\nnewdata2\n\n   col1 col2\n1    31    1\n2    32    4\n3    33    7\n4    34   10\n5    35   13\n6    36   16\n7    37   19\n8    38   22\n9    39   25\n10   40   28\n\nnewdata2[order(newdata2$col1, decreasing = TRUE),]\n\n   col1 col2\n10   40   28\n9    39   25\n8    38   22\n7    37   19\n6    36   16\n5    35   13\n4    34   10\n3    33    7\n2    32    4\n1    31    1\n\n## Q2: How to increase the number or rows?\n\n## increasing the number, where n is followed by number of rows\nhead(newdata2,n=9)\n\n  col1 col2\n1   31    1\n2   32    4\n3   33    7\n4   34   10\n5   35   13\n6   36   16\n7   37   19\n8   38   22\n9   39   25"
  },
  {
    "objectID": "workshop2.html#bonus-activity---plotting-in-r",
    "href": "workshop2.html#bonus-activity---plotting-in-r",
    "title": "Intro to R-2",
    "section": "Bonus activity - plotting in R",
    "text": "Bonus activity - plotting in R\nBase R can be used to create simple plots.\n\n#--------Basic scatterplot\n\n# Create data for plot\nx&lt;- seq(1,100, by=3) \ny&lt;- x/2\n\n# Basic x and y plot\nplot(x,y) \n\n\n\n# Add title\nplot(x,y,main=\"Title of plot\") \n\n\n\n# Add x and y labels\nplot(x,y,main=\"Title of plot\",xlab = \"This is x axis label\",\n     ylab=\"This is y label\")\n\n\n\n# Change color\n\nplot(x,y,main=\"Title of plot\",xlab = \"This is x axis label\",\n     ylab=\"This is y label\",col=\"blue\")\n\n\n\n\n\nHistograms\n\n# rnorm generates a vector of normally distributed random numbers.\n\nx&lt;-rnorm(1000, mean = 0, sd = 1)\nhist(x)\nhist(x, breaks = 10)\n\n\n\nhist(x, breaks = 100)\n\n\n\nhist(x, breaks = 100, col = \"orange\", main = \"This is title\", \n     xlab = \"This is x axis\", ylab = \"This is y axis\")"
  },
  {
    "objectID": "workshop2.html#important-functions",
    "href": "workshop2.html#important-functions",
    "title": "Intro to R-2",
    "section": "",
    "text": "ls() # list all the variables in the environment\n\n[1] \"has_annotations\"\n\nrm(x) # can be used to remove specific var\n\nWarning in rm(x): object 'x' not found\n\n#rm(list = ls()) # removes everything"
  },
  {
    "objectID": "workshop2.html#inbuild-datasets-in-r",
    "href": "workshop2.html#inbuild-datasets-in-r",
    "title": "Intro to R-2",
    "section": "Inbuild datasets in R",
    "text": "Inbuild datasets in R\n\n#data() # checking\n\ndata(Orange) # loading\n\n# viewing\nOrange \n\n   Tree  age circumference\n1     1  118            30\n2     1  484            58\n3     1  664            87\n4     1 1004           115\n5     1 1231           120\n6     1 1372           142\n7     1 1582           145\n8     2  118            33\n9     2  484            69\n10    2  664           111\n11    2 1004           156\n12    2 1231           172\n13    2 1372           203\n14    2 1582           203\n15    3  118            30\n16    3  484            51\n17    3  664            75\n18    3 1004           108\n19    3 1231           115\n20    3 1372           139\n21    3 1582           140\n22    4  118            32\n23    4  484            62\n24    4  664           112\n25    4 1004           167\n26    4 1231           179\n27    4 1372           209\n28    4 1582           214\n29    5  118            30\n30    5  484            49\n31    5  664            81\n32    5 1004           125\n33    5 1231           142\n34    5 1372           174\n35    5 1582           177\n\nView(Orange) # opens a viewing window\nhead(Orange) # prints out first six rows on your console\n\n  Tree  age circumference\n1    1  118            30\n2    1  484            58\n3    1  664            87\n4    1 1004           115\n5    1 1231           120\n6    1 1372           142\n\ntail(Orange) # prints out last six rows on your console\n\n   Tree  age circumference\n30    5  484            49\n31    5  664            81\n32    5 1004           125\n33    5 1231           142\n34    5 1372           174\n35    5 1582           177\n\nstr(Orange)  # tells you about the structure of the data\n\nClasses 'nfnGroupedData', 'nfGroupedData', 'groupedData' and 'data.frame':  35 obs. of  3 variables:\n $ Tree         : Ord.factor w/ 5 levels \"3\"&lt;\"1\"&lt;\"5\"&lt;\"2\"&lt;..: 2 2 2 2 2 2 2 4 4 4 ...\n $ age          : num  118 484 664 1004 1231 ...\n $ circumference: num  30 58 87 115 120 142 145 33 69 111 ...\n - attr(*, \"formula\")=Class 'formula'  language circumference ~ age | Tree\n  .. ..- attr(*, \".Environment\")=&lt;environment: R_EmptyEnv&gt; \n - attr(*, \"labels\")=List of 2\n  ..$ x: chr \"Time since December 31, 1968\"\n  ..$ y: chr \"Trunk circumference\"\n - attr(*, \"units\")=List of 2\n  ..$ x: chr \"(days)\"\n  ..$ y: chr \"(mm)\"\n\ndim(Orange)  # dimensions of the data - in terms of rows and columns\n\n[1] 35  3"
  },
  {
    "objectID": "workshop2.html#data-frames",
    "href": "workshop2.html#data-frames",
    "title": "Intro to R-2",
    "section": "Data frames",
    "text": "Data frames\nA data frame is a rectangular collection of values, usually organized so that variables appear in the columns and observations appear in rows.\n\n# Creating a new data frame that has 3 vectors of different types\ndat.new &lt;- data.frame(name = c(\"Anna\", \"Bob\", \"Chris\"),\n                    language = c(\"R\", \"C\", \"Java\"),\n                    year = c(4, 5, 9))\n\n# View the dataframe\nhead(dat.new)\n\n   name language year\n1  Anna        R    4\n2   Bob        C    5\n3 Chris     Java    9"
  },
  {
    "objectID": "workshop2.html#writing-and-reading-files",
    "href": "workshop2.html#writing-and-reading-files",
    "title": "Intro to R-2",
    "section": "Writing and reading files",
    "text": "Writing and reading files\n\n# This will add additional row names \nwrite.csv(dat.new,file = \"my_data.csv\")\n\nread.csv(\"my_data.csv\")\n\n  X  name language year\n1 1  Anna        R    4\n2 2   Bob        C    5\n3 3 Chris     Java    9\n\n# To avoid adding row names to the data, use row.names=FALSE \nwrite.csv(dat.new,file = \"my_data.csv\", row.names = FALSE) \nread.csv(\"my_data.csv\") # reads into the console\n\n   name language year\n1  Anna        R    4\n2   Bob        C    5\n3 Chris     Java    9\n\n# To save the data into a variable:\ndat.new2&lt;- read.csv(\"my_data.csv\")\n\n\nWorking with data frames\n\ndat.new2&lt;- read.csv(\"my_data.csv\") \n\n# Note that you should have your entire path for the data under the quotes \n\n# if your data is not saved in the working directory\n# names of the data \nnames(dat.new2) \n\n[1] \"name\"     \"language\" \"year\"    \n\n# column names \ncolnames(dat.new2) \n\n[1] \"name\"     \"language\" \"year\"    \n\n# rownames\nrownames(dat.new2)\n\n[1] \"1\" \"2\" \"3\"\n\n# type of data\nclass(dat.new2) \n\n[1] \"data.frame\"\n\n# structure of data \nstr(dat.new2) \n\n'data.frame':   3 obs. of  3 variables:\n $ name    : chr  \"Anna\" \"Bob\" \"Chris\"\n $ language: chr  \"R\" \"C\" \"Java\"\n $ year    : int  4 5 9\n\n# accessing a vector in the dataframe\ndat.new2$name \n\n[1] \"Anna\"  \"Bob\"   \"Chris\"\n\n# accessing a second element of a vector in the dataframe\ndat.new2$name[2] \n\n[1] \"Bob\"\n\n# accessing the language in the dataframe\ndat.new2$language \n\n[1] \"R\"    \"C\"    \"Java\"\n\n# accessing a third element of a vector in the dataframe\ndat.new2$language[3] \n\n[1] \"Java\"\n\n# Removing rows\ndat.new2[-2,]\n\n   name language year\n1  Anna        R    4\n3 Chris     Java    9\n\n# Removing columns\ndat.new2[,-1]\n\n  language year\n1        R    4\n2        C    5\n3     Java    9\n\n# Appending to a data frame\ndat.new3&lt;- data.frame(name = c(\"Diego\", \"Evan\", \"Felicia\", \"George\"), language = c(\"Python\", \"Perl\", \"C++\",\"HTML\"),\n                    year = c(4, 5, 9,10))\n\n# Binding by row\nrbind(dat.new2,dat.new3)\n\n     name language year\n1    Anna        R    4\n2     Bob        C    5\n3   Chris     Java    9\n4   Diego   Python    4\n5    Evan     Perl    5\n6 Felicia      C++    9\n7  George     HTML   10\n\nnewdata&lt;-rbind(dat.new2,dat.new3)\n\n# Binding by column\n# cbind(dat.new2,dat.new3) # will give you error\n\n## why this error? Because to bind by column, the number of rows should be equal\n\ndat.new4&lt;-dat.new3[-3,] # removing a row from 3rd data frame and adding to a new data frame\ncbind(dat.new4,dat.new2)\n\n    name language year  name language year\n1  Diego   Python    4  Anna        R    4\n2   Evan     Perl    5   Bob        C    5\n4 George     HTML   10 Chris     Java    9\n\n# Notice that R doesn't care about the content but the structure of data \n\n\n\nSubsetting dataframes\n\n# The notation is nameofdata[row, column]\nnewdata[4,2]\n\n[1] \"Python\"\n\n# accessing more than one value\nnewdata[1:4,] # gets you first four rows and all the columns\n\n   name language year\n1  Anna        R    4\n2   Bob        C    5\n3 Chris     Java    9\n4 Diego   Python    4\n\nnewdata[,1:2] # all the rows and first two columns\n\n     name language\n1    Anna        R\n2     Bob        C\n3   Chris     Java\n4   Diego   Python\n5    Evan     Perl\n6 Felicia      C++\n7  George     HTML\n\n# Extracting specific information: \nnewdata[c(1,3),] # Gets you first and third row and all columns\n\n   name language year\n1  Anna        R    4\n3 Chris     Java    9\n\nnewdata[c(5,4),c(1,2)] # Guess\n\n   name language\n5  Evan     Perl\n4 Diego   Python\n\n## Tip: \n\n# Remember that the order of extraction matters.\n\n## Accessing by name\nnewdata[\"name\"]\n\n     name\n1    Anna\n2     Bob\n3   Chris\n4   Diego\n5    Evan\n6 Felicia\n7  George\n\nnewdata[\"year\"]\n\n  year\n1    4\n2    5\n3    9\n4    4\n5    5\n6    9\n7   10\n\n## Operator\nnewdata$name\n\n[1] \"Anna\"    \"Bob\"     \"Chris\"   \"Diego\"   \"Evan\"    \"Felicia\" \"George\""
  },
  {
    "objectID": "workshop3.html",
    "href": "workshop3.html",
    "title": "Data Visualization",
    "section": "",
    "text": "3 main types of plotting in R:\n\nbase\nlattice\nggplot2\n\nFor this workshop series we are focusing on ggplot2 package for learning how to create publication quality plots."
  },
  {
    "objectID": "workshop4.html",
    "href": "workshop4.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "# Save packages as a vector\nall.lib&lt;-c(\"tidyverse\",\"ggplot2\", \"dplyr\",\"tidyr\",\"modelr\")\n\n# Load packages\nlapply(all.lib,require,character.only=TRUE)\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nLoading required package: modelr\n\n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE"
  },
  {
    "objectID": "workshop4.html#load-your-data-example-1",
    "href": "workshop4.html#load-your-data-example-1",
    "title": "Exploratory Data Analysis",
    "section": "Load your data: Example 1",
    "text": "Load your data: Example 1\na. Fuel economy data from 1999 to 2008 for 38 popular models of cars. The subset dataset from EPA. Full data available [here](https://fueleconomy.gov)\n\n# Load data\ndata(\"mpg\")\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# … with 224 more rows\n# ℹ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "workshop4.html#exploring-the-data",
    "href": "workshop4.html#exploring-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Exploring the data",
    "text": "Exploring the data\n\n# Useful functions in exploring the data\nncol(mpg)\n\n[1] 11\n\nnrow(mpg)\n\n[1] 234\n\ndim(mpg)\n\n[1] 234  11\n\nstr(mpg)\n\ntibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\n\nsummary(mpg)\n\n manufacturer          model               displ            year     \n Length:234         Length:234         Min.   :1.600   Min.   :1999  \n Class :character   Class :character   1st Qu.:2.400   1st Qu.:1999  \n Mode  :character   Mode  :character   Median :3.300   Median :2004  \n                                       Mean   :3.472   Mean   :2004  \n                                       3rd Qu.:4.600   3rd Qu.:2008  \n                                       Max.   :7.000   Max.   :2008  \n      cyl           trans               drv                 cty       \n Min.   :4.000   Length:234         Length:234         Min.   : 9.00  \n 1st Qu.:4.000   Class :character   Class :character   1st Qu.:14.00  \n Median :6.000   Mode  :character   Mode  :character   Median :17.00  \n Mean   :5.889                                         Mean   :16.86  \n 3rd Qu.:8.000                                         3rd Qu.:19.00  \n Max.   :8.000                                         Max.   :35.00  \n      hwy             fl               class          \n Min.   :12.00   Length:234         Length:234        \n 1st Qu.:18.00   Class :character   Class :character  \n Median :24.00   Mode  :character   Mode  :character  \n Mean   :23.44                                        \n 3rd Qu.:27.00                                        \n Max.   :44.00                                        \n\nhead(mpg)\n\n# A tibble: 6 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…\n\ntail(mpg)\n\n# A tibble: 6 × 11\n  manufacturer model  displ  year   cyl trans      drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1 volkswagen   passat   1.8  1999     4 auto(l5)   f        18    29 p     mids…\n2 volkswagen   passat   2    2008     4 auto(s6)   f        19    28 p     mids…\n3 volkswagen   passat   2    2008     4 manual(m6) f        21    29 p     mids…\n4 volkswagen   passat   2.8  1999     6 auto(l5)   f        16    26 p     mids…\n5 volkswagen   passat   2.8  1999     6 manual(m5) f        18    26 p     mids…\n6 volkswagen   passat   3.6  2008     6 auto(s6)   f        17    26 p     mids…"
  },
  {
    "objectID": "workshop4.html#load-your-data-example-2",
    "href": "workshop4.html#load-your-data-example-2",
    "title": "Exploratory Data Analysis",
    "section": "Load your data: Example 2",
    "text": "Load your data: Example 2\nb. Flow of the River Nile, measurements of the annual flow of the river Nile at Aswan from Balke, N. S. (1993) and Cobb, G. W. (1978)"
  },
  {
    "objectID": "workshop4.html#another-example-of-time-series-data",
    "href": "workshop4.html#another-example-of-time-series-data",
    "title": "Exploratory Data Analysis",
    "section": "Another example of time series data",
    "text": "Another example of time series data\n\ndata(\"Nile\")\nhead(Nile)\n\n[1] 1120 1160  963 1210 1160 1160\n\ntable(Nile)\n\nNile\n 456  649  676  692  694  698  701  702  714  718  726  740  742  744  746  749 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    1    1 \n 759  764  768  771  774  781  796  797  799  801  812  813  815  821  822  824 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 831  832  833  838  840  845  846  848  860  862  864  865  874  890  897  901 \n   1    1    1    1    1    3    1    1    1    1    1    1    2    1    1    1 \n 906  912  916  918  919  923  935  940  944  958  960  963  969  975  984  986 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 994  995 1010 1020 1030 1040 1050 1100 1110 1120 1140 1150 1160 1170 1180 1210 \n   1    1    1    3    1    2    2    3    1    2    2    1    3    1    1    2 \n1220 1230 1250 1260 1370 \n   1    1    1    1    1"
  },
  {
    "objectID": "workshop4.html#creating-a-tibble",
    "href": "workshop4.html#creating-a-tibble",
    "title": "Exploratory Data Analysis",
    "section": "Creating a tibble",
    "text": "Creating a tibble\n\ndata &lt;- data.frame(a = 1:3, b = letters[1:3], c = Sys.Date() - 1:3)\n\ndata\n\n  a b          c\n1 1 a 2023-08-03\n2 2 b 2023-08-02\n3 3 c 2023-08-01\n\n#&gt;   a b          c\n#&gt; 1 1 a 2023-02-21\n#&gt; 2 2 b 2023-02-20\n#&gt; 3 3 c 2023-02-19\n\nas_tibble(data)\n\n# A tibble: 3 × 3\n      a b     c         \n  &lt;int&gt; &lt;chr&gt; &lt;date&gt;    \n1     1 a     2023-08-03\n2     2 b     2023-08-02\n3     3 c     2023-08-01\n\n#&gt; # A tibble: 3 × 3\n#&gt;       a b     c         \n#&gt;   &lt;int&gt; &lt;chr&gt; &lt;date&gt;    \n#&gt; 1     1 a     2023-02-21\n#&gt; 2     2 b     2023-02-20\n#&gt; 3     3 c     2023-02-19\n\n## Creating a tibble from preloaded dataset\ndata(iris)\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\nas_tibble(iris)\n\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# … with 140 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n# Saving the tibble a new dataset\niris.updated&lt;-as_tibble(iris)"
  },
  {
    "objectID": "workshop4.html#finding-patterns-in-data-through-visualization-and-transformations",
    "href": "workshop4.html#finding-patterns-in-data-through-visualization-and-transformations",
    "title": "Exploratory Data Analysis",
    "section": "Finding patterns in data through visualization and transformations",
    "text": "Finding patterns in data through visualization and transformations\n\nCategorical variable\nUsing geom_bar for displaying categorical variable,\n\nggplot(data = mpg) +\n  geom_bar(mapping = aes(x = manufacturer))\n\n\n\n\nFigure 1: Displaying categorical variable with mpg.\n\n\n\n\nUsing the same above example for iris dataset, using the categorical variable,\n\nggplot(data = iris) +\n  geom_bar(mapping = aes(x = Species))\n\n\n\n\nFigure 2: Displaying categorical variable with iris.\n\n\n\n\nNotice how the bars are equal because the y axis that shows the count is same (i.e 50) for each of the species.\n\n\nCount function\nThe height of the bars displays how many observations occurred with each x value.\n\nmpg %&gt;% \n  count(manufacturer)\n\n# A tibble: 15 × 2\n   manufacturer     n\n   &lt;chr&gt;        &lt;int&gt;\n 1 audi            18\n 2 chevrolet       19\n 3 dodge           37\n 4 ford            25\n 5 honda            9\n 6 hyundai         14\n 7 jeep             8\n 8 land rover       4\n 9 lincoln          3\n10 mercury          4\n11 nissan          13\n12 pontiac          5\n13 subaru          14\n14 toyota          34\n15 volkswagen      27\n\n\n\niris.updated %&gt;% \n  count(Species)\n\n# A tibble: 3 × 2\n  Species        n\n  &lt;fct&gt;      &lt;int&gt;\n1 setosa        50\n2 versicolor    50\n3 virginica     50\n\n\n\n\nContinuous variable\nUsing geom_bar for a continuous variable,\n\nggplot(data = iris.updated) +\n  geom_bar(mapping = aes(x = Sepal.Length))\n\n\n\n\nFigure 3: Displaying continuous variable with iris.\n\n\n\n\nUsing histogram is better here for continuous variable,\n\niris.updated %&gt;%\n  ggplot()+\n  geom_histogram(mapping = aes(x = Sepal.Length),binwidth= 0.1)\n\n\n\n\nFigure 4: Displaying continuous variable using histogram, with iris.\n\n\n\n\nUsing mpg dataset,\n\nmpg %&gt;%\n ggplot()+\n geom_histogram(mapping = aes(x = displ), binwidth = 0.5)\n\n\n\n\nFigure 5: Displaying continuous variable with mpg.\n\n\n\n\n\n\ncut_width function\nDisplay how the histogram was made\nFor iris dataset,\n\niris.updated %&gt;% \ncount(cut_width(Sepal.Length, 0.1))\n\n# A tibble: 35 × 2\n   `cut_width(Sepal.Length, 0.1)`     n\n   &lt;fct&gt;                          &lt;int&gt;\n 1 [4.25,4.35]                        1\n 2 (4.35,4.45]                        3\n 3 (4.45,4.55]                        1\n 4 (4.55,4.65]                        4\n 5 (4.65,4.75]                        2\n 6 (4.75,4.85]                        5\n 7 (4.85,4.95]                        6\n 8 (4.95,5.05]                       10\n 9 (5.05,5.15]                        9\n10 (5.15,5.25]                        4\n# … with 25 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\nFor mpg dataset,\n\nmpg %&gt;% \ncount(cut_width(displ, 0.5))\n\n# A tibble: 12 × 2\n   `cut_width(displ, 0.5)`     n\n   &lt;fct&gt;                   &lt;int&gt;\n 1 [1.25,1.75]                 5\n 2 (1.75,2.25]                44\n 3 (2.25,2.75]                41\n 4 (2.75,3.25]                24\n 5 (3.25,3.75]                23\n 6 (3.75,4.25]                30\n 7 (4.25,4.75]                29\n 8 (4.75,5.25]                 7\n 9 (5.25,5.75]                23\n10 (5.75,6.25]                 6\n11 (6.25,6.75]                 1\n12 (6.75,7.25]                 1\n\n\n\nNote here that the numbers correspond to the binwidth used in each histogram\n\n\n\nFilter function\nsmaller dataset by filtering. The filter function evaluates a condition inside the bracket.\n\nmpg %&gt;% \n  filter(cty &gt;20)\n\n# A tibble: 45 × 11\n   manufacturer model  displ  year   cyl trans     drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4       1.8  1999     4 manual(m… f        21    29 p     comp…\n 2 audi         a4       2    2008     4 auto(av)  f        21    30 p     comp…\n 3 chevrolet    malibu   2.4  2008     4 auto(l4)  f        22    30 r     mids…\n 4 honda        civic    1.6  1999     4 manual(m… f        28    33 r     subc…\n 5 honda        civic    1.6  1999     4 auto(l4)  f        24    32 r     subc…\n 6 honda        civic    1.6  1999     4 manual(m… f        25    32 r     subc…\n 7 honda        civic    1.6  1999     4 manual(m… f        23    29 p     subc…\n 8 honda        civic    1.6  1999     4 auto(l4)  f        24    32 r     subc…\n 9 honda        civic    1.8  2008     4 manual(m… f        26    34 r     subc…\n10 honda        civic    1.8  2008     4 auto(l5)  f        25    36 r     subc…\n# … with 35 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\nmpg.sub&lt;- mpg %&gt;%\n  filter(cty &gt;20)\n\n\niris.updated %&gt;%\n  filter(Petal.Width &gt; 1)\n\n# A tibble: 93 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   \n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;     \n 1          7           3.2          4.7         1.4 versicolor\n 2          6.4         3.2          4.5         1.5 versicolor\n 3          6.9         3.1          4.9         1.5 versicolor\n 4          5.5         2.3          4           1.3 versicolor\n 5          6.5         2.8          4.6         1.5 versicolor\n 6          5.7         2.8          4.5         1.3 versicolor\n 7          6.3         3.3          4.7         1.6 versicolor\n 8          6.6         2.9          4.6         1.3 versicolor\n 9          5.2         2.7          3.9         1.4 versicolor\n10          5.9         3            4.2         1.5 versicolor\n# … with 83 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\niris.sub&lt;- iris.updated %&gt;%\n  filter(Petal.Width &gt;1)\n\nPlotting a subset of the dataset,\n\n# plotting \nggplot(data = mpg.sub, mapping = aes(x = cty)) +\n  geom_histogram(binwidth = 0.25)\n\n\n\n\nFigure 6: Plotting a subset dataset, mpg.\n\n\n\n\n\n#  plotting \nggplot(data = iris.sub, mapping = aes(x = Petal.Width)) +\n  geom_histogram(binwidth = 0.1)\n\n\n\n\nFigure 7: Plotting a subset dataset, iris.\n\n\n\n\n\n\nExpanding the x-y limits\n\n# Seeing unusual values\nggplot(mpg) + \n  geom_histogram(mapping = aes(x = displ), binwidth = 0.5)+\n  coord_cartesian(ylim = c(0, 50), xlim=c(0,100))\n\n\n\n\nFigure 8: Expanding the x-y coordinates,mpg.\n\n\n\n\n\n\nSelect function\nUsed for subsetting a dataset, by selecting column names,\n\nmpg.filtered1 &lt;- mpg %&gt;% \n  filter(cty &lt; 10 | cty &gt; 15) %&gt;% \n  select(manufacturer,cty, displ)\n\nmpg.filtered1\n\n# A tibble: 142 × 3\n   manufacturer   cty displ\n   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 audi            18   1.8\n 2 audi            21   1.8\n 3 audi            20   2  \n 4 audi            21   2  \n 5 audi            16   2.8\n 6 audi            18   2.8\n 7 audi            18   3.1\n 8 audi            18   1.8\n 9 audi            16   1.8\n10 audi            20   2  \n# … with 132 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\nArrange function\nSorts in ascending order by the column name provided,\n\nmpg.filtered2.asc &lt;- mpg %&gt;% \n  filter(cty &lt; 10 | cty &gt; 15) %&gt;% \n  select(manufacturer,cty, displ) %&gt;%\n  arrange(cty)\n\nmpg.filtered2.asc\n\n# A tibble: 142 × 3\n   manufacturer   cty displ\n   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 dodge            9   4.7\n 2 dodge            9   4.7\n 3 dodge            9   4.7\n 4 dodge            9   4.7\n 5 jeep             9   4.7\n 6 audi            16   2.8\n 7 audi            16   1.8\n 8 audi            16   4.2\n 9 chevrolet       16   5.7\n10 chevrolet       16   6.2\n# … with 132 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\nUsing arrange to sort in descending order, use the function across within arrange.\n\nNote remember you can nest the functions within another function.\n\nmpg.filtered2.dsc &lt;- mpg %&gt;% \n  filter(cty &lt; 10 | cty &gt; 15) %&gt;% \n  select(manufacturer,cty, displ) %&gt;%\n  arrange(across(cty,desc))\n\nmpg.filtered2.dsc\n\n# A tibble: 142 × 3\n   manufacturer   cty displ\n   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;\n 1 volkswagen      35   1.9\n 2 volkswagen      33   1.9\n 3 volkswagen      29   1.9\n 4 honda           28   1.6\n 5 toyota          28   1.8\n 6 honda           26   1.8\n 7 toyota          26   1.8\n 8 toyota          26   1.8\n 9 honda           25   1.6\n10 honda           25   1.8\n# … with 132 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\n\nMutate function\nUsed for adding more columns using a condition. Note here that the notation for\n ifelse(CONDITION, VALUE_IF_TRUE, VALUE_IF_FALSE)\n\n# Mutate - add more columns\nmpg.filtered3 &lt;- mpg.filtered2.asc %&gt;% \n  mutate(newcol = ifelse(cty &lt; 10, NA, 0))\n\nmpg.filtered3\n\n# A tibble: 142 × 4\n   manufacturer   cty displ newcol\n   &lt;chr&gt;        &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1 dodge            9   4.7     NA\n 2 dodge            9   4.7     NA\n 3 dodge            9   4.7     NA\n 4 dodge            9   4.7     NA\n 5 jeep             9   4.7     NA\n 6 audi            16   2.8      0\n 7 audi            16   1.8      0\n 8 audi            16   4.2      0\n 9 chevrolet       16   5.7      0\n10 chevrolet       16   6.2      0\n# … with 132 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\nYou can add multiple columns using mutate function,\n\niris.updated %&gt;%\n  mutate(order.name=\"Asparagales\",\n         height=Sepal.Length*5)\n\n# A tibble: 150 × 7\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species order.name  height\n          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;   &lt;chr&gt;        &lt;dbl&gt;\n 1          5.1         3.5          1.4         0.2 setosa  Asparagales   25.5\n 2          4.9         3            1.4         0.2 setosa  Asparagales   24.5\n 3          4.7         3.2          1.3         0.2 setosa  Asparagales   23.5\n 4          4.6         3.1          1.5         0.2 setosa  Asparagales   23  \n 5          5           3.6          1.4         0.2 setosa  Asparagales   25  \n 6          5.4         3.9          1.7         0.4 setosa  Asparagales   27  \n 7          4.6         3.4          1.4         0.3 setosa  Asparagales   23  \n 8          5           3.4          1.5         0.2 setosa  Asparagales   25  \n 9          4.4         2.9          1.4         0.2 setosa  Asparagales   22  \n10          4.9         3.1          1.5         0.1 setosa  Asparagales   24.5\n# … with 140 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\nBoxplot\nUsing function geom_boxplot to look at trends in data,\n\n# Boxplot\nggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +\n  geom_boxplot()+\n  xlab(\"highway miles\")+\n  ylab(\"manufacturer\")\n\n\n\n\nFigure 9: Using boxplots, mpg.\n\n\n\n\n\n\nReorder function\n\nUsing function reorder to see a clear trend.\nNote that reorder is a special case of the function factor.\nThe factor function is in base R and is used for ordering vector data.\n\n\n# Easy to see trend\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = reorder(manufacturer, hwy, FUN = median), y = hwy))+\n  xlab(\"highway miles\")+\n  ylab(\"manufacturer\")\n\n\n\n\nFigure 10: Clear trend using reorder function.\n\n\n\n\n\n\nFlip the coordinates\n\n# Flip coordinates\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = reorder(manufacturer, hwy, FUN = median), y = hwy))+\n  coord_flip()+\n  xlab(\"highway miles\")+\n  ylab(\"manufacturer\")\n\n\n\n\nFigure 11: Flipped coordinates,mpg.\n\n\n\n\n\n\nScatterplot of the data\nGeom point is used for looking at a scatterplot,\n\n# Scatterplot\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = manufacturer, y = hwy))+\n   xlab(\"highway miles\")+\n   ylab(\"manufacturer\")\n\n\n\n\nFigure 12: Scatterplot of the data,mpg."
  },
  {
    "objectID": "workshop4.html#finding-patterns-in-data-through-modelling",
    "href": "workshop4.html#finding-patterns-in-data-through-modelling",
    "title": "Exploratory Data Analysis",
    "section": "Finding patterns in data through modelling",
    "text": "Finding patterns in data through modelling\nRefine the questions based on what you learn and repeat the process. Let’s ask a new question.\nHow highway miles are varying with city miles?\n\n# How highway miles are varying with city miles\nggplot(data = mpg)+ \n  geom_point(mapping = aes(x = hwy,y=cty))+\n   xlab(\"highway miles\")+\n   ylab(\"city miles\")\n\n\n\n\nFigure 13: Scatterplot of city miles v/s highway miles.\n\n\n\n\n\nLinear regression\nAre highway miles linearly related with city miles?\n\n\nDefining a linear model\n\nlm(hwy~cty,data = mpg) \n\n\nCall:\nlm(formula = hwy ~ cty, data = mpg)\n\nCoefficients:\n(Intercept)          cty  \n      0.892        1.337  \n\nmodel1&lt;-lm(hwy~cty,data = mpg)\nsummary(model1)\n\n\nCall:\nlm(formula = hwy ~ cty, data = mpg)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.3408 -1.2790  0.0214  1.0338  4.0461 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.89204    0.46895   1.902   0.0584 .  \ncty          1.33746    0.02697  49.585   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.752 on 232 degrees of freedom\nMultiple R-squared:  0.9138,    Adjusted R-squared:  0.9134 \nF-statistic:  2459 on 1 and 232 DF,  p-value: &lt; 2.2e-16\n\nplot(model1)\n\n\n\n\n\n\n\n\n\n\n\n\n# Other useful functions\ncoefficients(model1) # model coefficients\n\n(Intercept)         cty \n  0.8920411   1.3374556 \n\nconfint(model1, level=0.95) # Confidence Intervals for model parameters\n\n                  2.5 %   97.5 %\n(Intercept) -0.03189534 1.815978\ncty          1.28431197 1.390599\n\nresiduals(model1) # residuals values\n\n           1            2            3            4            5            6 \n 4.033757915  0.021391084  3.358846694  1.021391084  3.708669135  1.033757915 \n           7            8            9           10           11           12 \n 2.033757915  1.033757915  2.708669135  0.358846694  0.696302304  4.046124746 \n          13           14           15           16           17           18 \n 1.371213525  1.371213525  4.046124746  3.046124746  1.371213525  0.708669135 \n          19           20           21           22           23           24 \n 0.383580356 -0.604052813  0.383580356 -1.278964034  0.058491577  3.708669135 \n          25           26           27           28           29           30 \n 2.046124746  3.708669135  4.046124746  3.046124746 -0.616419644 -1.604052813 \n          31           32           33           34           35           36 \n-0.604052813 -2.616419644  0.696302304 -0.316064527  1.033757915  4.033757915 \n          37           38           39           40           41           42 \n 2.371213525 -0.966242085  0.371213525 -0.291330865 -0.291330865  0.371213525 \n          43           44           45           46           47           48 \n 0.371213525  1.395947187  1.046124746  0.046124746  0.708669135  0.708669135 \n          49           50           51           52           53           54 \n-1.953875254 -1.616419644 -1.278964034 -2.616419644 -0.616419644 -0.616419644 \n          55           56           57           58           59           60 \n-0.929141592  1.395947187 -0.604052813 -1.278964034 -1.278964034 -0.929141592 \n          61           62           63           64           65           66 \n-1.278964034  0.395947187 -0.278964034 -0.604052813 -0.941508423 -0.929141592 \n          67           68           69           70           71           72 \n-1.278964034 -1.278964034 -0.941508423 -0.929141592 -0.604052813  0.395947187 \n          73           74           75           76           77           78 \n-1.278964034 -0.604052813  1.395947187  1.395947187  1.058491577 -2.616419644 \n          79           80           81           82           83           84 \n-1.953875254 -2.616419644  0.721035966  0.721035966 -1.278964034 -2.616419644 \n          85           86           87           88           89           90 \n-2.616419644 -2.278964034 -2.278964034 -1.278964034 -0.604052813 -1.278964034 \n          91           92           93           94           95           96 \n 1.033757915  0.033757915  2.371213525  1.708669135  0.046124746  1.046124746 \n          97           98           99          100          101          102 \n 2.046124746  1.046124746  0.383580356 -5.340798189 -0.990975747 -2.328431358 \n         103          104          105          106          107          108 \n-2.653520137 -0.990975747 -1.665886968  1.671568642  3.009024253  0.021391084 \n         109          110          111          112          113          114 \n 1.033757915  2.033757915  1.021391084  2.021391084  1.033757915  1.033757915 \n         115          116          117          118          119          120 \n 1.696302304 -0.303697696  2.696302304  0.358846694 -0.641153306  0.371213525 \n         121          122          123          124          125          126 \n 1.708669135  0.371213525 -1.628786475 -1.953875254 -0.953875254 -2.616419644 \n         127          128          129          130          131          132 \n-0.929141592 -0.616419644 -0.278964034 -1.604052813 -0.604052813  1.058491577 \n         133          134          135          136          137          138 \n 1.058491577 -0.604052813  1.395947187  0.395947187  1.058491577 -2.616419644 \n         139          140          141          142          143          144 \n 0.721035966  0.721035966 -1.278964034  0.021391084  0.696302304 -0.653520137 \n         145          146          147          148          149          150 \n 0.346479863  0.696302304 -0.303697696  1.033757915 -1.303697696 -1.303697696 \n         151          152          153          154          155          156 \n-2.616419644 -3.953875254  0.383580356  1.058491577  1.033757915  3.708669135 \n         157          158          159          160          161          162 \n 3.371213525  3.033757915  2.708669135  0.033757915 -0.966242085 -0.641153306 \n         163          164          165          166          167          168 \n-1.303697696 -1.641153306 -1.966242085 -2.978608916 -0.303697696 -0.303697696 \n         169          170          171          172          173          174 \n-0.303697696 -2.641153306 -0.641153306 -1.303697696 -0.641153306 -0.953875254 \n         175          176          177          178          179          180 \n-2.291330865 -1.953875254 -3.953875254 -2.291330865 -2.616419644  0.021391084 \n         181          182          183          184          185          186 \n-1.978608916  2.021391084  2.021391084  1.033757915  1.033757915  1.696302304 \n         187          188          189          190          191          192 \n-1.978608916  0.021391084  2.021391084  0.683935473  1.033757915  1.033757915 \n         193          194          195          196          197          198 \n 2.033757915 -2.990975747  0.009024253 -0.665886968 -1.340798189 -0.665886968 \n         199          200          201          202          203          204 \n-0.604052813 -0.278964034 -0.953875254 -2.291330865 -1.628786475 -3.953875254 \n         205          206          207          208          209          210 \n-1.953875254 -2.953875254 -2.291330865  0.021391084 -0.303697696  0.021391084 \n         211          212          213          214          215          216 \n-1.316064527  0.371213525 -1.028076240  0.021391084 -0.303697696 -1.316064527 \n         217          218          219          220          221          222 \n 0.021391084  0.021391084  0.021391084  0.708669135  0.371213525 -3.702987461 \n         223          224          225          226          227          228 \n 1.321746201  0.021391084 -0.303697696  0.358846694  1.358846694  0.021391084 \n         229          230          231          232          233          234 \n 4.033757915  1.696302304  0.021391084  3.708669135  1.033757915  2.371213525 \n\nplot(residuals(model1)) # residuals plots\n\n\n\n\n\n\nUsing add_residual function within tidyverse\n\n# Using ggplot2 and add_residual function\nmpg.model1 &lt;- mpg %&gt;% \n  add_residuals(model1) %&gt;% \n  mutate(resid = exp(resid))\n\nggplot(data = mpg.model1) + \n  geom_point(mapping = aes(x = hwy, y = resid))\n\n\n\n\nFigure 14: Adding residuals to ggplot,mpg.\n\n\n\n\n\n\nIs there a logarithmic relationship?\n\nlm(log(hwy)~cty,data = mpg)\n\n\nCall:\nlm(formula = log(hwy) ~ cty, data = mpg)\n\nCoefficients:\n(Intercept)          cty  \n    2.16112      0.05697  \n\n\n\n\nFinding correlation\n\ncor() : computes the correlation coefficient\ncor.test() : test for association/correlation between paired samples. It returns both the correlation coefficient and the significance level(or p-value) of the correlation.\n\n\n# Default method: Pearson\ncor(mpg$cty, mpg$hwy)\n\n[1] 0.9559159\n\ncor.test(mpg$cty, mpg$hwy, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  mpg$cty and mpg$hwy\nt = 49.585, df = 232, p-value &lt; 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.9433129 0.9657663\nsample estimates:\n      cor \n0.9559159 \n\n# Save into a vector\ncor.result&lt;-cor.test(mpg$cty, mpg$hwy, method=\"pearson\")\n\n\nt is the t-test statistic value;\ndf is the degrees of freedom;\np-value is the significance level of the t-test;\nconf.int is the confidence interval of the correlation coefficient at 95%;\nsample estimates is the correlation coefficient(Cor.coeff)\n\n\n# Extract the p.value\ncor.result$p.value\n\n[1] 1.868307e-125\n\n# Extract the correlation coefficient\ncor.result$estimate\n\n      cor \n0.9559159 \n\n\n\n\nT-test\n\nt.test(mpg$cty, mpg$hwy) # here both the variable are numeric\n\n\n    Welch Two Sample t-test\n\ndata:  mpg$cty and mpg$hwy\nt = -13.755, df = 421.79, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -7.521683 -5.640710\nsample estimates:\nmean of x mean of y \n 16.85897  23.44017 \n\n# paired t-test\nt.test(mpg$cty,mpg$hwy,paired=TRUE) # both the variable are numeric\n\n\n    Paired t-test\n\ndata:  mpg$cty and mpg$hwy\nt = -44.492, df = 233, p-value &lt; 2.2e-16\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -6.872628 -6.289765\nsample estimates:\nmean difference \n      -6.581197 \n\n\n\nYou can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate.\nYou can use the alternative=“less” or alternative=“greater” option to specify a one tailed test."
  },
  {
    "objectID": "workshop4.html#simulated-dataset-using-probability-distribution",
    "href": "workshop4.html#simulated-dataset-using-probability-distribution",
    "title": "Exploratory Data Analysis",
    "section": "Simulated dataset using probability distribution",
    "text": "Simulated dataset using probability distribution\n\n# Creating simulated data to work\nset.seed(5)\n\nxvar &lt;- 1:20 + rnorm(20,sd=3)\nzvar &lt;- (1:20)/4 + rnorm(20,sd=2)\nyvar &lt;- -2*xvar + xvar*zvar/5 + 3 + rnorm(20,sd=4)\n\n# Make a data frame \nmydat &lt;- data.frame(x=xvar, y=yvar, z=zvar)\n\n# first 6 rows\nhead(mydat)\n\n           x          y         z\n1 -1.5225664  11.620810 2.0510239\n2  6.1530780  -9.582383 2.3837388\n3 -0.7664756   3.669601 3.6859238\n4  4.2104283   4.194208 2.4135222\n5 10.1343226 -13.241300 2.8880179\n6  4.1912761  -2.368301 0.9130363\n\n\n\nT-test\n\n# independent 2-group t-test\n#t.test(y~x) # where y is numeric and x is a binary factor\n\n# independent 2-group t-test\nt.test(yvar,xvar) # where y1 and y2 are numeric\n\n\n    Welch Two Sample t-test\n\ndata:  yvar and xvar\nt = -7.1706, df = 30.697, p-value = 4.899e-08\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -23.70438 -13.20283\nsample estimates:\nmean of x mean of y \n-8.795275  9.658327 \n\n# paired t-test\nt.test(yvar,xvar,paired=TRUE) # where yvar,xvar are numeric\n\n\n    Paired t-test\n\ndata:  yvar and xvar\nt = -5.4883, df = 19, p-value = 2.703e-05\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -25.49104 -11.41616\nsample estimates:\nmean difference \n       -18.4536 \n\n\n\n\nCorrelation\n\nPearson’s\n\n# Correlation between xvar and yvar \n# Default method: Pearson\ncor(mydat$x, mydat$y)\n\n[1] -0.8098878\n\ncor.test(mydat$x, mydat$y, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  mydat$x and mydat$y\nt = -5.8577, df = 18, p-value = 1.51e-05\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.9219786 -0.5725725\nsample estimates:\n       cor \n-0.8098878 \n\n# Save into a vector\ncor.result&lt;-cor.test(mydat$x, mydat$y, method=\"pearson\")\n\n# Extract the p.value\ncor.result$p.value\n\n[1] 1.510141e-05\n\n# Extract the correlation coefficient\ncor.result$estimate\n\n       cor \n-0.8098878 \n\n\n\n\nSpearman’s\n\n# Spearman's correlation\ncor(mydat$x, mydat$y, method=\"spearman\")\n\n[1] -0.7804511\n\ncor.test(mydat$x, mydat$y, method=\"spearman\")\n\n\n    Spearman's rank correlation rho\n\ndata:  mydat$x and mydat$y\nS = 2368, p-value = 7.156e-05\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n       rho \n-0.7804511 \n\n\n\n\nKendall’s\n\n# Kendall's correlation\ncor(mydat$x, mydat$y, method=\"kendall\")\n\n[1] -0.6210526\n\ncor.test(mydat$x, mydat$y, method=\"kendall\")\n\n\n    Kendall's rank correlation tau\n\ndata:  mydat$x and mydat$y\nT = 36, p-value = 5.177e-05\nalternative hypothesis: true tau is not equal to 0\nsample estimates:\n       tau \n-0.6210526"
  },
  {
    "objectID": "workshop4.html#setup",
    "href": "workshop4.html#setup",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "# Save packages as a vector\nall.lib&lt;-c(\"tidyverse\",\"ggplot2\", \"dplyr\",\"tidyr\",\"modelr\")\n\n# Load packages\nlapply(all.lib,require,character.only=TRUE)\n\nLoading required package: tidyverse\n\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nLoading required package: modelr\n\n\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n\n[[5]]\n[1] TRUE"
  },
  {
    "objectID": "workshop4.html#introduction",
    "href": "workshop4.html#introduction",
    "title": "Exploratory Data Analysis",
    "section": "Introduction:",
    "text": "Introduction:\nSteps to exploratory data analysis:\n\nGenerate questions and hypothesis about the data.\nUnderstand your data\nRead the metadata if the data is not yours\nThink about the analysis plan led by questions\nMake sure your hypothesis-driven studies are clearly stated"
  },
  {
    "objectID": "workshop3.html#color-palettes-in-r",
    "href": "workshop3.html#color-palettes-in-r",
    "title": "Data Visualization",
    "section": "Color palettes in R",
    "text": "Color palettes in R\nR colorbrewer is a good option\n\nlibrary(RColorBrewer)\npar(mar=c(3,4,2,2))\ndisplay.brewer.all()"
  },
  {
    "objectID": "workshop3.html#creating-your-own-color-palette",
    "href": "workshop3.html#creating-your-own-color-palette",
    "title": "Data Visualization",
    "section": "Creating your own color palette",
    "text": "Creating your own color palette\n\n# COLOR PALETTES\npastel.colpal&lt;-c(\"#355070\", \"#6d597a\", \"#b56576\", \"#e56b6f\", \"#eaac8b\",\"#a44200\")\n\nsage.colpal&lt;-c(\"#cb997e\", \"#ddbea9\", \"#ffe8d6\", \"#b7b7a4\", \"#6b705c\",\"#585123\")\n\ntog&lt;-rbind(pastel.colpal,sage.colpal)\n\n#show_col(tog,labels = FALSE)\nshow_col(tog,cex_label=0.5)"
  },
  {
    "objectID": "workshop3.html#dataset-working-with-inbuild-dataset",
    "href": "workshop3.html#dataset-working-with-inbuild-dataset",
    "title": "Data Visualization",
    "section": "Dataset: Working with Inbuild dataset",
    "text": "Dataset: Working with Inbuild dataset\n\ndata()  # Exploring different inbuild dataset\ndata(\"iris\") # attaching inbuild dataset\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n# Iris data set is a dataset with 150 observation with 5 variables as columns\n# Each observation is a row (150)\n# Each variable is a column (5): Sepal.Length; Sepal.Width, Petal.Length, Petal.Width and Species\n#View(iris) # Viewing dataset\nstr(iris) # structure of data\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\ndim(iris) # dimensions rows and columns\n\n[1] 150   5"
  },
  {
    "objectID": "workshop3.html#ggplot2",
    "href": "workshop3.html#ggplot2",
    "title": "Data Visualization",
    "section": "ggplot2",
    "text": "ggplot2\nggplot2 function works with figures in layers. We are first calling the ggplot function to create a new plot.\nAdding a base layer:\n\nggplot(data = iris, mapping = aes(x = Species , y = Sepal.Length))\n\n\n\n\nFigure 1: Base Layer in ggplot2\n\n\n\n\nggplot tells R, we are working with a new plot. All the parameters and arguments given inside of the ggplot function are global parameters.\nTwo arguments passed:\n\ndata : what data to work with\naes function : how variables in the data map to aesthetic properties of the figure, in this case the x and y locations\n\nAdding geom_point function:\n\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length))+\n  geom_point()\n\n\n\n\nFigure 2: Adding geom plot\n\n\n\n\n\nChanging aes function by adding color:\n\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\n  geom_point()\n\n\n\n\nFigure 3: Adding color\n\n\n\n\n\n\ngeom_line\nChanging the geom parameters from point to line:\n\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\n geom_line()\n\n\n\n\nFigure 4: Adding line\n\n\n\n\n\n\ngeom_boxplot\nChanging the geom parameters from point to boxplot:\n\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\n geom_boxplot()\n\n\n\n\nFigure 5: Adding boxplot\n\n\n\n\n\n\nAdding more layer\nAdding additional layers of points on top of boxplots:\n\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\n geom_boxplot() +\n geom_point()\n\n\n\n\nFigure 6: Data on Boxplots"
  },
  {
    "objectID": "workshop3.html#hypothesis-how-is-sepal-length-varying-with-petal-length",
    "href": "workshop3.html#hypothesis-how-is-sepal-length-varying-with-petal-length",
    "title": "Data Visualization",
    "section": "HYPOTHESIS: How is sepal length varying with petal length?",
    "text": "HYPOTHESIS: How is sepal length varying with petal length?\n\nAdding group aesthetics\nWe are testing for the following hypothesis. Hypothesis: How is sepal length varying with petal length?\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\n geom_point()\n\n\n\n\nFigure 7: Sepal length variation with petal length\n\n\n\n\n\n\nAdding a line on top of points:\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\n geom_point()+\n geom_line()\n\n\n\n\nFigure 8: Sepal length variation with petal length, line added\n\n\n\n\nThe above graph doesn’t make sense unless you are looking for an overall pattern without breaking it down by species.\n\n\nAdding grouping\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group=Species)) +\n geom_point() +\n geom_line()\n\n\n\n\nFigure 9: Sepal length variation with petal length, grouped by species\n\n\n\n\n\n\nChanging aesthetics within layers\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group=Species)) +\n geom_point() +\n geom_line(aes(color=Species))\n\n\n\n\nFigure 10: Sepal length variation with petal length, grouped by species, colored line\n\n\n\n\n\n\nChanging transparency\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group=Species)) +\n geom_point(alpha = 0.5) +\n geom_line(aes(color=Species))\n\n\n\n\nFigure 11: Sepal length variation with petal length, grouped by species, transparency added\n\n\n\n\n\n\nAdding transformation\ngeom_smooth: fitting a relationship between data; by default formula is y~x and method is loess\n\n\nWithout grouping\nThis doesn’t make sense unless you are looking for an overall pattern in the data.\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\n geom_point(alpha = 0.5) +\n geom_line(aes(color=Species))+\n geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\nFigure 12: Trends in data, without grouping\n\n\n\n\n\n\nWith grouping\nIf you are looking for a relationship between sepal length and petal length for each species\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group = Species)) +\n geom_point(alpha = 0.5) +\n geom_line(aes(color=Species))+\n geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\nFigure 13: Trends in data, with grouping\n\n\n\n\n\n\nLinear relationship\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group = Species)) +\n geom_point(alpha = 0.5) +\n geom_line(aes(color=Species))+\n geom_smooth(method = \"lm\",size=1)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 14: Linear relationship in data, without grouping\n\n\n\n\n\n\nMultipanel figures\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=1)+\n  facet_wrap(~Species)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 15: Multipanel figure, facet wrap\n\n\n\n\n\n\nChanging figure aesthetics\nColors\n\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\n  geom_point()+\n  scale_color_manual(values=pastel.colpal)\n\n\n\n\nFigure 16: Changing colors\n\n\n\n\nUnderstanding colors\nHere only line changes color since geom_line has the color aesthetics\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=1)+\n  facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 17: Color aesthetics for only lines\n\n\n\n\nLet’s specify color as a global aesthetic\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 18: Color as global aesthetic\n\n\n\n\nChanging x and y labels\nusing xlab(), ylab()\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)+\n  xlab(\"This is Sepal Length\") +\n  ylab(\"This s Petal Length\") \n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 19: Changing x and y label\n\n\n\n\n\n\nAdding themes\nggthemes package has several pre-specified themes\n\nipsum theme\n\nlibrary(hrbrthemes)\n#| label: fig-tweentyfig\n#| fig-cap: \"Ipsum theme\"\n#| fig-align: \"center\"\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line()+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)+\n  xlab(\"This is Sepal Length\") +\n  ylab(\"This s Petal Length\") +\n  theme_ipsum()\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nClassic theme\n\nlibrary(ggthemes)\n#| label: fig-twentyonefig\n#| fig-cap: \"Classic theme\"\n#| fig-align: \"center\"\nggplot(data = iris, mapping = aes(x = Sepal.Length, y = Petal.Length, color=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)+\n  xlab(\"This is Sepal Length\") +\n  ylab(\"This s Petal Length\") +\n  theme_classic()\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\n\nAdding figure title\nUsing ggtitle,\n\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species,group=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  #facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)+\n  xlab(\"Sepal Length\") +\n  ylab(\"Petal Length\") +\n  ggtitle(\"Relationship between Sepal Length and Petal Length\")+\n  theme_classic()\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 20: Adding figure title\n\n\n\n\n\n\nAdding more theme elements\n\nfig1&lt;-ggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length,color=Species,group=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  #facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)+\n  xlab(\"Sepal Length\") +\n  ylab(\"Petal Length\") +\n  ggtitle(\"Relationship between Sepal Length and Petal Length\")+\n  theme_ipsum()+\n  theme(axis.ticks.x=element_blank(),\n        legend.title = element_text(size=14,face = \"bold\"),\n        #legend.text = element_markdown(size=12,face=\"bold\"),\n        axis.text.x = element_text(size=14,face=\"bold\"),\n        axis.text.y = element_text(size=14,face=\"bold\"),\n        axis.title.y = element_text(size=18,face=\"bold\"),\n        axis.title.x = element_text(size = 18,face=\"bold\"))\n\nfig1\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 21: Adding more elements\n\n\n\n\n\n\nSaving and publishing plots\n\nfigure1&lt;-ggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species,group=Species)) +\n  geom_point(alpha = 0.5) +\n  geom_line(aes(color=Species))+\n  geom_smooth(method = \"lm\",size=0.4,color=\"black\")+\n  #facet_wrap(~Species)+\n  scale_color_manual(values=pastel.colpal)+\n  xlab(\"Sepal Length\") +\n  ylab(\"Petal Length\") +\n  ggtitle(\"Relationship between Sepal Length and Petal Length\")+\n  theme_ipsum()+\n  theme(axis.ticks.x=element_blank(),\n        legend.title = element_text(size=14,face = \"bold\"),\n       # legend.text = element_markdown(size=12,face=\"bold\"),\n        axis.text.x = element_text(size=14,face=\"bold\"),\n        axis.text.y = element_text(size=14,face=\"bold\"),\n        axis.title.y = element_text(size=18,face=\"bold\"),\n        axis.title.x = element_text(size = 18,face=\"bold\"))\n\nfigure1\n\n`geom_smooth()` using formula 'y ~ x'\n\nggsave(filename=\"My_publishable_figure.jpeg\", plot=figure1, width=10, height=6,dpi=700)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\nFigure 22: Saving and publishing plot\n\n\n\n\n\n\nMultiple plots together in R\nYou can add multiple figures together from different data sets as well.\n\n# Renaming the figures\n## Geom plot using mtcars data\n\nfig1&lt;-ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) + \n    geom_boxplot(fill=\"slateblue\", alpha=0.2) + \n    xlab(\"cyl\")\n\n## Building a dataset with different distributions\ndata &lt;- data.frame(\n  type = c( rep(\"variable 1\", 1000), rep(\"variable 2\", 1000) ),\n  value = c( rnorm(1000), rnorm(1000, mean=4) ))\n\nfig2&lt;- data %&gt;%\n  ggplot( aes(x=value, fill=type)) +\n  geom_histogram( color=\"#e9ecef\", alpha=0.6, position = 'identity') +\n  scale_fill_manual(values=c(\"#69b3a2\", \"#404080\")) +\n  theme_ipsum() +\n  labs(fill=\"\")\n\n## Loading dataset from github\npath&lt;-\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv\"\n\ndata &lt;- read.table(path, header=TRUE)\n\n# Make the histogram\nfig3&lt;- data %&gt;%\n  filter( price&lt;300 ) %&gt;%\n  ggplot( aes(x=price)) +\n  geom_density(fill=\"#69b3a2\", color=\"#e9ecef\", alpha=0.8)\n\n## Loading dataset from your computer\n# Note you will have to specify a dataset here from your computer for this to work\ndata(\"Orange\")\nwrite.csv(Orange,\"newlysaved.csv\",row.names = FALSE)\ndata&lt;-read.csv(file = \"newlysaved.csv\")\n\nfig4&lt;- data %&gt;%\n  ggplot(aes(x=Tree,y=circumference,color=Tree))+\n  geom_boxplot(aes(factor(Tree)))\n\nall.fig&lt;-ggarrange(nrow = 2,ncol = 2, \n                  fig1,fig2,fig3,fig4,\n                  labels = c(\"a)\",\"b)\",\"c)\",\"d)\"))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\nall.fig\n\n#ggsave(filename=\"MultipleFigures.jpeg\", plot=all.fig, width=15, height=8,dpi=600)\n\n\n\n\nFigure 23: Multiple plot together"
  }
]