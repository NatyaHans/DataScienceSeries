[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Series",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Cran Introduction to R https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\nR Cookbook http://www.cookbook-r.com/\nInteractively learn R https://www.programiz.com/r\nggplot2 tutorials https://r-graph-gallery.com/ggplot2-package.html\nggplot2 https://ggplot2.tidyverse.org/\nColor Brewer https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3\nRcolorbrewer palette https://r-graph-gallery.com/38-rcolorbrewers-palettes.html\nColor Hex https://www.color-hex.com/\nggsci package https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html"
  },
  {
    "objectID": "resources.html#resources",
    "href": "resources.html#resources",
    "title": "Resources",
    "section": "",
    "text": "1. Cran Introduction to R https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf\n2. R Cookbook http://www.cookbook-r.com/\n3. Interactively learn R https://www.programiz.com/r"
  },
  {
    "objectID": "workshop1.html",
    "href": "workshop1.html",
    "title": "Intro to R",
    "section": "",
    "text": "The three panes are\n\nConsole - used for running the code\nEnvironment - has information about the loaded variables and history of commands run (it also has shortcuts for uploading datasets and saving workspace)\nHelp pane - gives you access to files, plots and package information. Also helpful in saving plots.\n\nYou can change where the console is in Rstudio by going to View-&gt;Pane-&gt;Console on Right. You can also change how the panes look in Rstudio by going to View-&gt;Pane-&gt;Pane Layout"
  },
  {
    "objectID": "workshop1.html#basics-using-rstudio-and-r",
    "href": "workshop1.html#basics-using-rstudio-and-r",
    "title": "Intro to R",
    "section": "",
    "text": "The three panes are\n\nConsole - used for running the code\nEnvironment - has information about the loaded variables and history of commands run (it also has shortcuts for uploading datasets and saving workspace)\nHelp pane - gives you access to files, plots and package information. Also helpful in saving plots.\n\nYou can change where the console is in Rstudio by going to View-&gt;Pane-&gt;Console on Right. You can also change how the panes look in Rstudio by going to View-&gt;Pane-&gt;Pane Layout"
  },
  {
    "objectID": "workshop1.html#arithmetic-operators-and-comparisons",
    "href": "workshop1.html#arithmetic-operators-and-comparisons",
    "title": "Intro to R",
    "section": "Arithmetic operators and comparisons",
    "text": "Arithmetic operators and comparisons\nR can do basic arithmetic calculations\n\nBasic calculation\n# Calculations\n\n1+1 # addition\n1-5 # subtraction\n1*3 # multiplication \n1/6 # division\n\n# Comparisons; evaluates the statement \n\n1==1  # equal to comparison; this statement evaluates to TRUE\n1!=1  # not equal comparison; evaluates to FALSE\n1!=2  # not equal comparison; evaluates to TRUE\n1&gt;2   # greater than comparison; evaluates to FALSE\n1&gt;=2  #\n\n\nUseful Inbuild Functions in R\n#Trig functions\nsin(1)\ncos(1)\n\n# log functions\n\nlog(1)\nlog10(2)\n\n# exponential\nexp(1)\n\n\nVariable assignment\n&lt;- is the assignment operator. You can also use = operator i.e. equals to sign.\nx &lt;- 5/9\n\nx\nx &lt;- x + 1 # variables can also be used to reassign\n\nx\n\n# Note that the following two lines of code are same\n\n# x = 8 \n# x &lt;- 8\nValid variable names cannot start with a special character or number. Periods, numbers and underscore are allowed within variable names. Please note that variable names are case sensitive in R. For example, variables names data.new and data.New are NOT the same.\nSome examples of allowed variable names:\n\nx_new\nx.new\nxNew\nxNEW\nNewx\nNEW\nNewx2\nNEW2x\nNEW2_x\n\n\n\nComments in R\n# single line comment\n# x&lt;-5\n\nx\n\n\"\nMulti line comment\n\nx&lt;- 5\n\nNot so pretty\n\n\"\n\nx\n\n\nVectors\nVectors are the most basic R data objects and there are six types of atomic vectors. They are logical, integer, double, complex, character and raw. Using function to create vectors:\n1:10 # is a sequence from 1 to 10\nx &lt;- 1:10\n\n# indexing a vector # Index in R starts at 1\nx[5] # this outputs the 5th element in the vector 5\n\n# subsetting a vector\nx &lt;- 10:20 # this is a vector from 10 to 20\nx[4:5] # subsetting the element 4th the 5th from the vector\n\n\n# Vector types\nx.num&lt;-c(1,7,8,16,245) # numeric vector\nstr(x.num)\nx.log&lt;-c(TRUE,FALSE,TRUE,FALSE,FALSE) # logical vector\nstr(x.log)\nx.char&lt;-c(\"A\", \"B\", \"C\",\"D\",\"E\",\"F\")\nstr(x.char)\n\n# changing vector types\nas.character(x.num) # changing the vector from numeric to character\nstr(as.character(x.num)) \nx.num&lt;-c(\"1\",\"7\",\"8\",\"16\",\"245\")\nstr(x.num)\nas.numeric(x.num)\nstr(as.numeric(x.num))\nseq(from=1,to=10)\nseq(from=-1,to=-10)\nseq(from=3,to=30,by=3)\ndat.seq&lt;-seq(from=1,to=300,by=4)\nlength(dat.seq)\n\n# rep function\nrep(1:3,5) # the sequence 1:3 is repeated 5 times"
  },
  {
    "objectID": "workshop1.html#installing-packages",
    "href": "workshop1.html#installing-packages",
    "title": "Intro to R",
    "section": "Installing packages",
    "text": "Installing packages\n#install.packages(\"ggplot2\") # installing packages\nlibrary(ggplot2) # using packages \nrequire(ggplot2) # using packages \n#update.packages(ggplot2) # updating packages\n#remove.packages(ggplot2) # removing packages"
  },
  {
    "objectID": "workshop1.html#file-and-project-management",
    "href": "workshop1.html#file-and-project-management",
    "title": "Intro to R",
    "section": "File and Project management",
    "text": "File and Project management\n\nRscript\nCreating a new R script in RStudio:\n\nClick the “File” menu button, then “New File”.\nClick “R script”.\n\n\n\nR Notebook and R markdown\nCreating a new R script in RStudio:\n\nClick the “File” menu button, then “New File”.\nClick “R markdown”.\nEnter “title” and “author” name\nChoose output format\n\n\n\nR Project\nCreating a new project in RStudio:\n\nClick the “File” menu button, then “New Project”.\nClick “New Directory”.\nClick “New Project”.\nType in the name of the directory to store your project, e.g. “my_project”.\nSelect the checkbox for “Create a git repository” for version control.\nClick the “Create Project” button."
  },
  {
    "objectID": "workshop1.html#getting-help",
    "href": "workshop1.html#getting-help",
    "title": "Intro to R",
    "section": "Getting help",
    "text": "Getting help\n? # help with a function\n?? # Fuzzy search\nsessionInfo() # prints out current version and packages loaded"
  },
  {
    "objectID": "workshop1.html#common-r-mistakes-and-how-to-avoid-them",
    "href": "workshop1.html#common-r-mistakes-and-how-to-avoid-them",
    "title": "Intro to R",
    "section": "Common R mistakes and how to avoid them",
    "text": "Common R mistakes and how to avoid them\n\nWrong paths: Make sure you understand the difference between absolute and relative paths of files. Most common errors the beginners face are not being able to load their data because of being in the wrong working directory. Set your working directory at the beginning of R session and make sure your file paths are correctly set.\nPay attention to Errors: If you are a new user or running a new script, make sure to run it line by line to troubleshoot the line giving you the error. Read the error if you are not able to figure it out, copy and paste the error into the search engine.\nNot Utilizing available help: Use Help pane, Stackoverflow , Rbloogers or R community available online and at your institution."
  },
  {
    "objectID": "workshop2.html",
    "href": "workshop2.html",
    "title": "Intro to R-2",
    "section": "",
    "text": "ls() # list all the variables in the environment\nrm(x) # can be used to remove specific var\n#rm(list = ls()) # removes everything"
  },
  {
    "objectID": "workshop2.html#matrices",
    "href": "workshop2.html#matrices",
    "title": "Intro to R-2",
    "section": "Matrices",
    "text": "Matrices\nIn R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. A matrix is two-dimensional, since we are only working with rows and columns.\n# Creating a new empty matrix\nmat.example &lt;- matrix(0, ncol=8, nrow=4) \n\n# viewing the matrix\nView(mat.example) \n\n# class\nclass(mat.example) \n\n# rows and columns\ndim(mat.example) \n\n# accessing column number\nncol(mat.example) \n\n# accessing row numbers\nnrow(mat.example) \n\nCreating data\n# Creating a new matrix with data:\n\n# Using rnorm to generate 20 random numbers\nmat.dat&lt;-rnorm(20)\n\n# Note that the random numbers will be different every time you run this code,\n\n# Note check ?rnorm ?pnorm ?dnorm for more information on using probability distribution\nmat.dat\n\n# populating the matrix by row\nmat.example2&lt;-matrix(data = mat.dat, nrow = 4, ncol = 5, byrow = TRUE) \n\n\nSubsetting Matrices\n# Subsetting rows and columns\nmat.example2[2,4]"
  },
  {
    "objectID": "workshop2.html#lists-in-r",
    "href": "workshop2.html#lists-in-r",
    "title": "Intro to R-2",
    "section": "Lists in R",
    "text": "Lists in R\nLists are the R objects and contain elements of different types, For example a list can have numbers, characters, strings, vectors, matrix and another list inside it. A list can also have a function as one of its elements.\nlist_data&lt;-list(\"Red\",\"Green\", c(21,34,22), TRUE, 52.53, 193.8)\nlist_data\nlist_data_new&lt;-list(dat.new2, mat.example2)\nlist_data_new\n\nSubsetting lists\nlist_data[[3]]\nlist_data_new[[2]]\n\n\nQuestions from the workshop\n# Q1: How to sort dataframes?\n\n# Use sort function to sort a vector\nx&lt;-c(1:10,8.5,7.6,2.5,1.3,2.4)\nsort(x)\n\n# For sorting dataframes using the function order\nnewdata[order(newdata$year, decreasing = TRUE), ]\n\n# Notice that the above function is used at the row position since we are sorting by row\n\n# Another example:\nnewdata2&lt;-data.frame(col1=c(31:40),col2=c(seq(1,30,by=3)))\nnewdata2\n\nnewdata2[order(newdata2$col1, decreasing = TRUE),]\n\n## Q2: How to increase the number or rows?\n\n## increasing the number, where n is followed by number of rows\nhead(newdata2,n=9)"
  },
  {
    "objectID": "workshop2.html#bonus-activity---plotting-in-r",
    "href": "workshop2.html#bonus-activity---plotting-in-r",
    "title": "Intro to R-2",
    "section": "Bonus activity - plotting in R",
    "text": "Bonus activity - plotting in R\nBase R can be used to create simple plots.\n#--------Basic scatterplot\n\n# Create data for plot\nx&lt;- seq(1,100, by=3) \ny&lt;- x/2\n\n# Basic x and y plot\nplot(x,y) \n\n# Add title\nplot(x,y,main=\"Title of plot\") \n\n# Add x and y labels\nplot(x,y,main=\"Title of plot\",xlab = \"This is x axis label\",\n     ylab=\"This is y label\")\n\n# Change color\n\nplot(x,y,main=\"Title of plot\",xlab = \"This is x axis label\",\n     ylab=\"This is y label\",col=\"blue\")\n\nHistograms\n# rnorm generates a vector of normally distributed random numbers.\n\nx&lt;-rnorm(1000, mean = 0, sd = 1)\nhist(x)\nhist(x, breaks = 10)\nhist(x, breaks = 100)\nhist(x, breaks = 100, col = \"orange\", main = \"This is title\", \n     xlab = \"This is x axis\", ylab = \"This is y axis\")"
  },
  {
    "objectID": "workshop2.html#important-functions",
    "href": "workshop2.html#important-functions",
    "title": "Intro to R-2",
    "section": "",
    "text": "ls() # list all the variables in the environment\nrm(x) # can be used to remove specific var\n#rm(list = ls()) # removes everything"
  },
  {
    "objectID": "workshop2.html#inbuild-datasets-in-r",
    "href": "workshop2.html#inbuild-datasets-in-r",
    "title": "Intro to R-2",
    "section": "Inbuild datasets in R",
    "text": "Inbuild datasets in R\n#data() # checking\n# loading\n\ndata(Orange)\n\n# viewing\nOrange \n\nView(Orange) # opens a viewing window\nhead(Orange) # prints out first six rows on your console\ntail(Orange) # prints out last six rows on your console\nstr(Orange)  # tells you about the structure of the data\ndim(Orange)  # dimensions of the data - in terms of rows and columns"
  },
  {
    "objectID": "workshop2.html#data-frames",
    "href": "workshop2.html#data-frames",
    "title": "Intro to R-2",
    "section": "Data frames",
    "text": "Data frames\nA data frame is a rectangular collection of values, usually organized so that variables appear in the columns and observations appear in rows.\n# Creating a new data frame that has 3 vectors of different types\n\ndat.new &lt;- data.frame(name = c(\"Anna\", \"Bob\", \"Chris\"),\n                    language = c(\"R\", \"C\", \"Java\"),\n                    year = c(4, 5, 9))\n\n# View the dataframe\nhead(dat.new)"
  },
  {
    "objectID": "workshop2.html#writing-and-reading-files",
    "href": "workshop2.html#writing-and-reading-files",
    "title": "Intro to R-2",
    "section": "Writing and reading files",
    "text": "Writing and reading files\n\n# This will add additional row names \nwrite.csv(dat.new,file = \"my_data.csv\")\n\nread.csv(\"my_data.csv\")\n\n# To avoid adding row names to the data, use row.names=FALSE \nwrite.csv(dat.new,file = \"my_data.csv\", row.names = FALSE) \nread.csv(\"my_data.csv\") # reads into the console\n\n# To save the data into a variable:\ndat.new2&lt;- read.csv(\"my_data.csv\")\n\nWorking with data frames\ndat.new2&lt;- read.csv(\"my_data.csv\") \n\n# Note that you should have your entire path for the data under the quotes \n\n# if your data is not saved in the working directory\n# names of the data \nnames(dat.new2) \n\n# column names \ncolnames(dat.new2) \n\n# rownames\nrownames(dat.new2)\n\n# type of data\nclass(dat.new2) \n\n# structure of data \nstr(dat.new2) \n\n# accessing a vector in the dataframe\ndat.new2$name \n\n# accessing a second element of a vector in the dataframe\ndat.new2$name[2] \n\n# accessing the language in the dataframe\ndat.new2$language \n\n# accessing a third element of a vector in the dataframe\ndat.new2$language[3] \n\n# Removing rows\ndat.new2[-2,]\n\n# Removing columns\ndat.new2[,-1]\n\n# Appending to a data frame\ndat.new3&lt;- data.frame(name = c(\"Diego\", \"Evan\", \"Felicia\", \"George\"), language = c(\"Python\", \"Perl\", \"C++\",\"HTML\"),\n                    year = c(4, 5, 9,10))\n\n# Binding by row\nrbind(dat.new2,dat.new3)\nnewdata&lt;-rbind(dat.new2,dat.new3)\n\n# Binding by column\ncbind(dat.new2,dat.new3) # will give you error\n\n## why this error? Because to bind by column, the number of rows should be equal\n\ndat.new4&lt;-dat.new3[-3,] # removing a row from 3rd data frame and adding to a new data frame\ncbind(dat.new4,dat.new2)\n\n# Notice that R doesn't care about the content but the structure of data \n\n\nSubsetting dataframes\n# The notation is nameofdata[row, column]\nnewdata[4,2]\n\n# accessing more than one value\nnewdata[1:4,] # gets you first four rows and all the columns\nnewdata[,1:2] # all the rows and first two columns\n\n# Extracting specific information: \nnewdata[c(1,3),] # Gets you first and third row and all columns\nnewdata[c(5,4),c(1,2)] # Guess\n\n## Tip: \n\n# Remember that the order of extraction matters.\n\n## Accessing by name\nnewdata[\"name\"]\nnewdata[\"year\"]\n\n## Operator\nnewdata$name"
  },
  {
    "objectID": "workshop3.html",
    "href": "workshop3.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Workshop plan\n3 main types of plotting in R:\n\nbase\nlattice\nggplot2\n\nFor this workshop series we are focusing on ggplot2 package for learning how to create publication quality plots.\n\n\nSet up\n\nInstalling required packages\ninstall.packages(\"ggplot2\")\n\n\nLoading packages\nlibrary(ggplot2)\n\n\nInstalling and loading multiple packages at once\n```{r ,results=‘hide’,warning=FALSE}\n# Create a vector of package names\nall.lib&lt;-c(“reshape2”,“ggplot2”,“gridExtra”,“ggpubr”,“ggthemes”,\n“scales”,“RColorBrewer”,“tidyverse”,“hrbrthemes”,\n“extrafont”,“ggtext”)\n# install packages at once\n#install.packages(all.lib)\n# Load packages at once\nlapply(all.lib,require,character.only=TRUE)\n```\n### Note about apply functions\n* lapply() function is useful for performing operations on list objects and returns a list object of same length of original set. lappy() returns a list of the similar length as input list object, each element of which is the result of applying FUN to the corresponding element of list. Lapply in R takes list, vector or data frame as input and gives output in list.\n* sapply() function takes list, vector or data frame as input and gives output in vector or matrix. It is useful for operations on list objects and returns a list object of same length of original set. Sapply function in R does the same job as lapply() function but returns a vector.\n```{r}\n# Creating a data frame\n# lapply(list, function)\nx &lt;- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))\n# compute the list mean for each list element\nlapply(x, mean)\n# sapply(list, function)\n```\n## Color palettes in R\nR colorbrewer is a good option\n```{r}\nlibrary(RColorBrewer)\npar(mar=c(3,4,2,2))\ndisplay.brewer.all()\n```\n## Creating your own color palette\n```{r}\n# COLOR PALETTES\npastel.colpal&lt;-c(“#355070”, “#6d597a”, “#b56576”, “#e56b6f”, “#eaac8b”,“#a44200”)\nsage.colpal&lt;-c(“#cb997e”, “#ddbea9”, “#ffe8d6”, “#b7b7a4”, “#6b705c”,“#585123”)\ntog&lt;-rbind(pastel.colpal,sage.colpal)\n#show_col(tog,labels = FALSE)\nshow_col(tog,cex_label=0.5)\n```\n## Dataset: Working with Inbuild dataset\n```{r}\ndata() # Exploring different inbuild dataset\ndata(“iris”) # attaching inbuild dataset\nhead(iris)\n# Iris data set is a dataset with 150 observation with 5 variables as columns\n# Each observation is a row (150)\n# Each variable is a column (5): Sepal.Length; Sepal.Width, Petal.Length, Petal.Width and Species\n#View(iris) # Viewing dataset\nstr(iris) # structure of data\ndim(iris) # dimensions rows and columns\n```\n## ggplot2\nggplot2 function works with figures in layers. We are first calling the ggplot function to create a new plot.\nAdding a base layer:\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Sepal.Length))\n```\nggplot tells R, we are working with a new plot. All the parameters and arguments given inside of the ggplot function are global parameters.\nTwo arguments passed:\n* data : what data to work with\n* aes function : how variables in the data map to aesthetic properties of the figure, in this case the x and y locations\nAdding geom_point function:\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length)) +\ngeom_point()\n```\n### Changing aes function by adding color:\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\ngeom_point()\n```\n### geom_line\nChanging the geom parameters from point to line:\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\ngeom_line()\n```\n### geom_boxplot\nChanging the geom parameters from point to boxplot:\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\ngeom_boxplot()\n```\n### Adding more layer\nAdding additional layers of points on top of boxplots\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\ngeom_boxplot() +\ngeom_point()\n```\n## HYPOTHESIS: How is sepal length varying with petal length?\n### Adding group aesthetics\nWe are testing for the following hypothesis.\nHypothesis: How is sepal length varying with petal length?\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\ngeom_point()\n```\n### Adding a line on top of points:\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\ngeom_point()+\ngeom_line()\n```\nThe above graph doesn’t make sense unless you are looking for an overall pattern without breaking it down by species.\n### Adding grouping\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group=Species)) +\ngeom_point() +\ngeom_line()\n```\n### Changing aesthetics within layers\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group=Species)) +\ngeom_point() +\ngeom_line(aes(color=Species))\n```\n### Changing transparency\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))\n```\n### Adding transformation\ngeom_smooth: fitting a relationship between data; by default formula is y~x and method is loess\n### Without grouping\nThis doesn’t make sense unless you are looking for an overall pattern in the data.\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth()\n```\n### With grouping\nIf you are looking for a relationship between sepal length and petal length for each species\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group = Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth()\n```\n### Linear relationship\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, group = Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=1)\n```\n```{r include=FALSE}\nknitr::opts_chunk$set(fig.width=8, fig.height=4)\n```\n### Multipanel figures\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=1)+\nfacet_wrap(~Species)\n```\n### Changing figure aesthetics\n### Colors\n```{r}\nggplot(data = iris, mapping = aes(x = Species , y = Petal.Length, color=Species)) +\ngeom_point()+\nscale_color_manual(values=pastel.colpal)\n```\n### Understanding colors\nHere only line changes color since geom_line has the color aesthesics\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=1)+\nfacet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)\n```\nLet’s specify color as a global aesthetic\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\nfacet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)\n```\n### Changing x and y labels\nusing xlab(), ylab()\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\nfacet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)+\nxlab(“This is Sepal Length”) +\nylab(“This s Petal Length”)\n```\n## Adding themes\nggthemes package has several pre-specified themes\n### ipsum theme\n```{r}\nlibrary(hrbrthemes)\nfig1&lt;-ggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length, color=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line()+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\nfacet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)+\nxlab(“This is Sepal Length”) +\nylab(“This s Petal Length”) +\ntheme_ipsum()\nfig1\n```\n### Classic theme\n```{r}\nlibrary(ggthemes)\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length,\ncolor=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\nfacet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)+\nxlab(“This is Sepal Length”) +\nylab(“This s Petal Length”) +\ntheme_classic()\n```\n### Adding figure title\n```{r}\nggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length,\ncolor=Species,group=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\n#facet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)+\nxlab(“Sepal Length”) +\nylab(“Petal Length”) +\nggtitle(“Relationship between Sepal Length and Petal Length”)+\ntheme_classic()\n```\n### Adding more theme elements\n```{r}\nfig1&lt;-ggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length,\ncolor=Species,group=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\n#facet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)+\nxlab(“Sepal Length”) +\nylab(“Petal Length”) +\nggtitle(“Relationship between Sepal Length and Petal Length”)+\ntheme_ipsum()+\ntheme(axis.ticks.x=element_blank(),\nlegend.title = element_text(size=14,face = “bold”),\nlegend.text = element_markdown(size=12,face=“bold”),\naxis.text.x = element_text(size=14,face=“bold”),\naxis.text.y = element_text(size=14,face=“bold”),\naxis.title.y = element_text(size=18,face=“bold”),\naxis.title.x = element_text(size = 18,face=“bold”))\nfig1\n```\n## Saving and publishing plots\n```{r}\nfigure1&lt;-ggplot(data = iris, mapping = aes(x = Sepal.Length , y = Petal.Length,\ncolor=Species,group=Species)) +\ngeom_point(alpha = 0.5) +\ngeom_line(aes(color=Species))+\ngeom_smooth(method = “lm”,linewidth=0.4,color=“black”)+\n#facet_wrap(~Species)+\nscale_color_manual(values=pastel.colpal)+\nxlab(“Sepal Length”) +\nylab(“Petal Length”) +\nggtitle(“Relationship between Sepal Length and Petal Length”)+\ntheme_ipsum()+\ntheme(axis.ticks.x=element_blank(),\nlegend.title = element_text(size=14,face = “bold”),\nlegend.text = element_markdown(size=12,face=“bold”),\naxis.text.x = element_text(size=14,face=“bold”),\naxis.text.y = element_text(size=14,face=“bold”),\naxis.title.y = element_text(size=18,face=“bold”),\naxis.title.x = element_text(size = 18,face=“bold”))\nfigure1\nggsave(filename=“My_publishable_figure.jpeg”, plot=figure1, width=10, height=6,dpi=700)\n```\n## Multiple plots together in R\nYou can add multiple figures together from different data sets as well.\n```{r}\n# Renaming the figures\n## Geom plot using mtcars data\nfig1&lt;-ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) +\ngeom_boxplot(fill=“slateblue”, alpha=0.2) +\nxlab(“cyl”)\n## Building a dataset with different distributions\ndata &lt;- data.frame(\ntype = c( rep(“variable 1”, 1000), rep(“variable 2”, 1000) ),\nvalue = c( rnorm(1000), rnorm(1000, mean=4) )\n)\nfig2&lt;- data %&gt;%\nggplot( aes(x=value, fill=type)) +\ngeom_histogram( color=“#e9ecef”, alpha=0.6, position = ‘identity’) +\nscale_fill_manual(values=c(“#69b3a2”, “#404080”)) +\ntheme_ipsum() +\nlabs(fill=““)\n## Loading dataset from github\npath&lt;-“https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv”\ndata &lt;- read.table(path, header=TRUE)\n# Make the histogram\nfig3&lt;- data %&gt;%\nfilter( price&lt;300 ) %&gt;%\nggplot( aes(x=price)) +\ngeom_density(fill=“#69b3a2”, color=“#e9ecef”, alpha=0.8)\n## Loading dataset from your computer\n# Note you will have to specify a dataset here from your computer for this to work\ndata&lt;-read.csv(file = “/Users/nhans/12-Teaching/IntrotoR/newlysaved.csv”)\nfig4&lt;- data %&gt;%\nggplot(aes(x=Tree,y=circumference,color=Tree))+\ngeom_boxplot(aes(factor(Tree)))\n```\n```{r}\nall.fig&lt;-ggarrange(nrow = 2,ncol = 2,\nfig1,fig2,fig3,fig4,\nlabels = c(“a)”,“b)”,“c)”,“d)”))\nall.fig\n#ggsave(filename=“MultipleFigures.jpeg”, plot=all.fig, width=15, height=8,dpi=600)\n```"
  },
  {
    "objectID": "workshop4.html",
    "href": "workshop4.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "# Save packages as a vector\nall.lib&lt;-c(\"tidyverse\",\"ggplot2\", \"dplyr\",\"tidyr\",\"modelr\")\n\n# Load packages\nlapply(all.lib,require,character.only=TRUE)"
  },
  {
    "objectID": "workshop4.html#load-your-data-example-1",
    "href": "workshop4.html#load-your-data-example-1",
    "title": "Exploratory Data Analysis",
    "section": "Load your data: Example 1",
    "text": "Load your data: Example 1\na. Fuel economy data from 1999 to 2008 for 38 popular models of cars. The subset dataset from EPA. Full data available [here](https://fueleconomy.gov)\n# Load data\ndata(\"mpg\")\nmpg"
  },
  {
    "objectID": "workshop4.html#exploring-the-data",
    "href": "workshop4.html#exploring-the-data",
    "title": "Exploratory Data Analysis",
    "section": "Exploring the data",
    "text": "Exploring the data\n# Useful functions in exploring the data\nncol(mpg)\nnrow(mpg)\ndim(mpg)\nstr(mpg)\nsummary(mpg)\nhead(mpg)\ntail(mpg)"
  },
  {
    "objectID": "workshop4.html#load-your-data-example-2",
    "href": "workshop4.html#load-your-data-example-2",
    "title": "Exploratory Data Analysis",
    "section": "Load your data: Example 2",
    "text": "Load your data: Example 2\nb. Flow of the River Nile, measurements of the annual flow of the river Nile at Aswan from Balke, N. S. (1993) and Cobb, G. W. (1978)"
  },
  {
    "objectID": "workshop4.html#another-example-of-time-series-data",
    "href": "workshop4.html#another-example-of-time-series-data",
    "title": "Exploratory Data Analysis",
    "section": "Another example of time series data",
    "text": "Another example of time series data\ndata(\"Nile\")\nhead(Nile)\ntable(Nile)"
  },
  {
    "objectID": "workshop4.html#creating-a-tibble",
    "href": "workshop4.html#creating-a-tibble",
    "title": "Exploratory Data Analysis",
    "section": "Creating a tibble",
    "text": "Creating a tibble\ndata &lt;- data.frame(a = 1:3, b = letters[1:3], c = Sys.Date() - 1:3)\n\ndata\n\n#&gt;   a b          c\n#&gt; 1 1 a 2023-02-21\n#&gt; 2 2 b 2023-02-20\n#&gt; 3 3 c 2023-02-19\n\nas_tibble(data)\n\n#&gt; # A tibble: 3 × 3\n#&gt;       a b     c         \n#&gt;   &lt;int&gt; &lt;chr&gt; &lt;date&gt;    \n#&gt; 1     1 a     2023-02-21\n#&gt; 2     2 b     2023-02-20\n#&gt; 3     3 c     2023-02-19\n\n## Creating a tibble from preloaded dataset\ndata(iris)\nhead(iris)\nas_tibble(iris)\n\n# Saving the tibble a new dataset\niris.updated&lt;-as_tibble(iris)"
  },
  {
    "objectID": "workshop4.html#finding-patterns-in-data-through-visualization-and-transformations",
    "href": "workshop4.html#finding-patterns-in-data-through-visualization-and-transformations",
    "title": "Exploratory Data Analysis",
    "section": "Finding patterns in data through visualization and transformations",
    "text": "Finding patterns in data through visualization and transformations\n\nCategorical variable\nUsing geom_bar for displaying categorical variable,\nggplot(data = mpg) +\n  geom_bar(mapping = aes(x = manufacturer))\nUsing the same above example for iris dataset, using the categorical variable,\nggplot(data = iris) +\n  geom_bar(mapping = aes(x = Species))\nNotice how the bars are equal because the y axis that shows the count is same (i.e 50) for each of the species.\n\n\nCount function\nThe height of the bars displays how many observations occurred with each x value.\nmpg %&gt;% \n  count(manufacturer)\niris.updated %&gt;% \n  count(Species)\n\n\nContinuous variable\nUsing geom_bar for a continuous variable,\nggplot(data = iris.updated) +\n  geom_bar(mapping = aes(x = Sepal.Length))\nUsing histogram is better here for continuous variable,\niris.updated %&gt;%\n  ggplot()+\n  geom_histogram(mapping = aes(x = Sepal.Length),binwidth= 0.1)\nUsing mpg dataset,\nmpg %&gt;%\n ggplot()+\n geom_histogram(mapping = aes(x = displ), binwidth = 0.5)\n\n\ncut_width function\nDisplay how the histogram was made\nFor iris dataset,\niris.updated %&gt;% \ncount(cut_width(Sepal.Length, 0.1))\nFor mpg dataset,\nmpg %&gt;% \ncount(cut_width(displ, 0.5))\n\nNote here that the numbers correspond to the binwidth used in each histogram\n\n\n\nFilter function\nsmaller dataset by filtering. The filter function evaluates a condition inside the bracket.\nmpg %&gt;% \n  filter(cty &gt;20)\n\nmpg.sub&lt;- mpg %&gt;%\n  filter(cty &gt;20)\niris.updated %&gt;%\n  filter(Petal.Width &gt; 1)\n\niris.sub&lt;- iris.updated %&gt;%\n  filter(Petal.Width &gt;1)\nPlotting a subset of the dataset\n# plotting \n\nggplot(data = mpg.sub, mapping = aes(x = cty)) +\n  geom_histogram(binwidth = 0.25)\n#  plotting \n\nggplot(data = iris.sub, mapping = aes(x = Petal.Width)) +\n  geom_histogram(binwidth = 0.1)\n\n\nExpanding the x-y limits\n# Seeing unusual values\n\nggplot(mpg) + \n\n  geom_histogram(mapping = aes(x = displ), binwidth = 0.5) +\n\n  coord_cartesian(ylim = c(0, 50), xlim=c(0,100))\n\n\nSelect function\nUsed for subsetting a dataset, by selecting column names\nmpg.filtered1 &lt;- mpg %&gt;% \n  filter(cty &lt; 10 | cty &gt; 15) %&gt;% \n  select(manufacturer,cty, displ)\n\nmpg.filtered1\n\n\nArrange function\nSorts in ascending order by the column name provided\nmpg.filtered2.asc &lt;- mpg %&gt;% \n  filter(cty &lt; 10 | cty &gt; 15) %&gt;% \n  select(manufacturer,cty, displ) %&gt;%\n  arrange(cty)\n\nmpg.filtered2.asc\nUsing arrange to sort in descending order, use the function across within arrange.\n\nNote remember you can nest the functions within another function.\n\nmpg.filtered2.dsc &lt;- mpg %&gt;% \n  filter(cty &lt; 10 | cty &gt; 15) %&gt;% \n  select(manufacturer,cty, displ) %&gt;%\n  arrange(across(cty,desc))\n\nmpg.filtered2.dsc\n\n\nMutate function\nUsed for adding more columns using a condition.Note here that the notation for ifelse(CONDITION, VALUE_IF_TRUE, VALUE_IF_FALSE)\n# Mutate - add more columns\n\nmpg.filtered3 &lt;- mpg.filtered2.asc %&gt;% \n  mutate(newcol = ifelse(cty &lt; 10, NA, 0))\n\nmpg.filtered3\nYou can add multiple columns using mutate function\niris.updated %&gt;%\n  mutate(order.name=\"Asparagales\",\n         height=Sepal.Length*5)\n\n\nBoxplot\nUsing function geom_boxplot to look at trends in data:\n# Boxplot\n\nggplot(data = mpg, mapping = aes(x = manufacturer, y = hwy)) +\n  geom_boxplot()+\n  xlab(\"highway miles\")+\n  ylab(\"manufacturer\")\n\n\nReorder function\n\nUsing function reorder to see a clear trend.\nNote that reorder is a special case of the function factor.\nThe factor function is in base R and is used for ordering vector data.\n\n# Easy to see trend\n\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = reorder(manufacturer, hwy, FUN = median), y = hwy))+\n  xlab(\"highway miles\")+\n  ylab(\"manufacturer\")\n\n\nFlip the coordinates\n# Flip coordinates\n\nggplot(data = mpg) +\n  geom_boxplot(mapping = aes(x = reorder(manufacturer, hwy, FUN = median), y = hwy))+\n  coord_flip()+\n  xlab(\"highway miles\")+\n  ylab(\"manufacturer\")\n\n\nScatterplot of the data\nGeom point is used for looking at a scatterplot\n# Scatterplot\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = manufacturer, y = hwy))+\n   xlab(\"highway miles\")+\n   ylab(\"manufacturer\")"
  },
  {
    "objectID": "workshop4.html#finding-patterns-in-data-through-modelling",
    "href": "workshop4.html#finding-patterns-in-data-through-modelling",
    "title": "Exploratory Data Analysis",
    "section": "Finding patterns in data through modelling",
    "text": "Finding patterns in data through modelling\nRefine the questions based on what you learn and repeat the process. Let’s ask a new question.\nHow highway miles are varying with city miles?\n# How highway miles are varying with city miles\n\nggplot(data = mpg)+ \n  geom_point(mapping = aes(x = hwy,y=cty))+\n   xlab(\"highway miles\")+\n   ylab(\"city miles\")\n\nLinear regression\nAre highway miles linearly related with city miles?\n\n\nDefining a linear model\nlm(hwy~cty,data = mpg) \nmodel1&lt;-lm(hwy~cty,data = mpg)\nsummary(model1)\nplot(model1)\n\n# Other useful functions\ncoefficients(model1) # model coefficients\nconfint(model1, level=0.95) # Confidence Intervals for model parameters\n\nresiduals(model1) # residuals values\nplot(residuals(model1)) # residuals plots\n\n\nUsing add_residual function within tidyverse\n# Using ggplot2 and add_residual function\n\nmpg.model1 &lt;- mpg %&gt;% \n  add_residuals(model1) %&gt;% \n  mutate(resid = exp(resid))\n\nggplot(data = mpg.model1) + \n  geom_point(mapping = aes(x = hwy, y = resid))\n\n\nIs there a logarithmic relationship?\nlm(log(hwy)~cty,data = mpg)\n\n\nFinding correlation\n\ncor() : computes the correlation coefficient\ncor.test() : test for association/correlation between paired samples. It returns both the correlation coefficient and the significance level(or p-value) of the correlation.\n\n# Default method: Pearson\ncor(mpg$cty, mpg$hwy)\ncor.test(mpg$cty, mpg$hwy, method=\"pearson\")\n\n# Save into a vector\ncor.result&lt;-cor.test(mpg$cty, mpg$hwy, method=\"pearson\")\n\nt is the t-test statistic value;\ndf is the degrees of freedom;\np-value is the significance level of the t-test;\nconf.int is the confidence interval of the correlation coefficient at 95%;\nsample estimates is the correlation coefficient(Cor.coeff)\n\n# Extract the p.value\ncor.result$p.value\n\n# Extract the correlation coefficient\ncor.result$estimate\n\n\nT-test\nt.test(mpg$cty, mpg$hwy) # here both the variable are numeric\n\n# paired t-test\nt.test(mpg$cty,mpg$hwy,paired=TRUE) # both the variable are numeric\n\nYou can use the var.equal = TRUE option to specify equal variances and a pooled variance estimate.\nYou can use the alternative=“less” or alternative=“greater” option to specify a one tailed test."
  },
  {
    "objectID": "workshop4.html#simulated-dataset-using-probability-distribution",
    "href": "workshop4.html#simulated-dataset-using-probability-distribution",
    "title": "Exploratory Data Analysis",
    "section": "Simulated dataset using probability distribution",
    "text": "Simulated dataset using probability distribution\n# Creating simulated data to work\nset.seed(5)\n\nxvar &lt;- 1:20 + rnorm(20,sd=3)\nzvar &lt;- (1:20)/4 + rnorm(20,sd=2)\nyvar &lt;- -2*xvar + xvar*zvar/5 + 3 + rnorm(20,sd=4)\n\n# Make a data frame \nmydat &lt;- data.frame(x=xvar, y=yvar, z=zvar)\n\n# first 6 rows\nhead(mydat)\n\nT-test\n# independent 2-group t-test\nt.test(y~x) # where y is numeric and x is a binary factor\n\n# independent 2-group t-test\nt.test(yvar,xvar) # where y1 and y2 are numeric\n\n# paired t-test\nt.test(yvar,xvar,paired=TRUE) # where yvar,xvar are numeric\n\n\nCorrelation\n\nPearson’s\n# Correlation between xvar and yvar \n# Default method: Pearson\ncor(mydat$x, mydat$y)\ncor.test(mydat$x, mydat$y, method=\"pearson\")\n\n# Save into a vector\ncor.result&lt;-cor.test(mydat$x, mydat$y, method=\"pearson\")\n\n# Extract the p.value\ncor.result$p.value\n\n# Extract the correlation coefficient\ncor.result$estimate\n\n\nSpearman’s\n# Spearman's correlation\n\ncor(mydat$x, mydat$y, method=\"spearman\")\ncor.test(mydat$x, mydat$y, method=\"spearman\")\n\n\nKendall’s\n# Kendall's correlation\n\ncor(mydat$x, mydat$y, method=\"kendall\")\ncor.test(mydat$x, mydat$y, method=\"kendall\")"
  }
]